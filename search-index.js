var searchIndex = {};
searchIndex['git2'] = {"items":[[0,"","git2","# libgit2 bindings for Rust"],[1,"Blob","","A structure to represent a git [blob][1]"],[1,"Branch","","A structure to represent a git [branch][1]"],[1,"Branches","","An iterator over the branches inside of a repository."],[1,"Buf","","A structure to wrap an intermediate buffer used by libgit2."],[1,"Commit","","A structure to represent a git [commit][1]"],[1,"Parents","","An iterator over the parent commits of a commit."],[1,"Config","","A structure representing a git configuration key/value store"],[1,"ConfigEntry","","A struct representing a certain entry owned by a `Config` instance."],[1,"ConfigEntries","","An iterator over the `ConfigEntry` values of a `Config` structure."],[1,"Cred","","A structure to represent git credentials in libgit2."],[1,"CredentialHelper","","Management of the gitcredentials(7) interface."],[11,"username","","A public field representing the currently discovered username from\nconfiguration.",0],[1,"Diff","","The diff object that contains all individual file deltas."],[1,"DiffDelta","","Description of changes to one entry."],[1,"DiffFile","","Description of one side of a delta."],[1,"DiffOptions","","Structure describing options about how the diff should be executed."],[1,"Deltas","","An iterator over the diffs in a delta"],[1,"DiffLine","","Structure describing a line (or data span) of a diff."],[1,"DiffHunk","","Structure describing a hunk of a diff."],[1,"DiffStats","","Structure describing a hunk of a diff."],[1,"Error","","A structure to represent errors coming out of libgit2."],[1,"Index","","A structure to represent a git [index][1]"],[1,"IndexEntry","","A structure to represent an entry or a file inside of an index."],[11,"ctime","","",1],[11,"mtime","","",1],[11,"dev","","",1],[11,"ino","","",1],[11,"mode","","",1],[11,"uid","","",1],[11,"gid","","",1],[11,"file_size","","",1],[11,"id","","",1],[11,"flags","","",1],[11,"flags_extended","","",1],[11,"path","","",1],[1,"IndexEntries","","An iterator over the entries in an index"],[1,"Note","","A structure representing a [note][note] in git."],[1,"Notes","","An iterator over all of the notes within a repository."],[1,"Object","","A structure to represent a git [object][1]"],[1,"Oid","","Unique identity of any object (commit, tree, blob, tag)."],[1,"Pathspec","","Structure representing a compiled pathspec used for matching against various\nstructures."],[1,"PathspecMatchList","","List of filenames matching a pathspec."],[1,"PathspecFailedEntries","","Iterator over the failed list of pathspec items that did not match."],[1,"PathspecDiffEntries","","Iterator over the matching diff deltas."],[1,"PathspecEntries","","Iterator over the matched paths in a pathspec."],[1,"Push","","A structure to represent a pending push operation to a remote."],[1,"PushStatus","","A status representing the result of updating a remote reference."],[11,"reference","","The reference that was updated as part of a push.",2],[11,"message","","If `None`, the reference was updated successfully, otherwise a message\nexplaining why it could not be updated is provided.",2],[1,"Reference","","A structure to represent a git [reference][1]."],[1,"References","","An iterator over the references in a repository."],[1,"ReferenceNames","","An iterator over the names of references in a repository."],[1,"Refspec","","A structure to represent a git [refspec][1]."],[1,"Remote","","A structure representing a [remote][1] of a git repository."],[1,"Refspecs","","An iterator over the refspecs that a remote contains."],[1,"RemoteHead","","Description of a reference advertised bya remote server, given out on calls\nto `list`."],[1,"RemoteCallbacks","","A structure to contain the callbacks which are invoked when a repository is\nbeing updated or downloaded."],[1,"Progress","","Struct representing the progress by an in-flight transfer."],[1,"Repository","","An owned git repository, representing all state associated with the\nunderlying filesystem."],[1,"RepositoryInitOptions","","Options which can be used to configure how a repository is initialized"],[1,"Revspec","","A revspec represents a range of revisions within a repository."],[1,"Revwalk","","A revwalk allows traversal of the commit graph defined by including one or\nmore leaves and excluding one or more roots."],[1,"Signature","","A Signature is used to indicate authorship of various actions throughout the\nlibrary."],[1,"StatusOptions","","Options that can be provided to `repo.statuses()` to control how the status\ninformation is gathered."],[1,"Statuses","","A container for a list of status information about a repository."],[1,"StatusIter","","An iterator over the statuses in a `Statuses` instance."],[1,"StatusEntry","","A structure representing an entry in the `Statuses` structure."],[1,"StringArray","","A string array structure used by libgit2"],[1,"StringArrayItems","","A forward iterator over the strings of an array, casted to `&str`."],[1,"StringArrayBytes","","A forward iterator over the strings of an array, casted to `&[u8]`."],[1,"Submodule","","A structure to represent a git [submodule][1]"],[1,"Tag","","A structure to represent a git [tag][1]"],[1,"Time","","Time in a signature"],[1,"IndexTime","","Time structure used in a git index entry."],[1,"Tree","","A structure to represent a git [tree][1]"],[1,"TreeEntry","","A structure representing an entry inside of a tree. An entry is borrowed\nfrom a tree."],[1,"Sort","","\nOrderings that may be specified for Revwalk iteration.\n"],[1,"CredentialType","","\nTypes of credentials that can be requested by a credential callback.\n"],[1,"IndexAddOption","","\nFlags for APIs that add files matching pathspec\n"],[1,"RevparseMode","","\nFlags for the return value of `Repository::revparse`\n"],[1,"Status","","\nFlags for repository status\n"],[1,"RepositoryInitMode","","\nMode options for RepositoryInitOptions\n"],[1,"SubmoduleStatus","","\nReturn codes for submodule status."],[1,"PathspecFlags","","\n"],[2,"StatusShow","","Enumeration of possible methods of what can be shown through a status\noperation."],[12,"Index","","Only gives status based on HEAD to index comparison, not looking at\nworking directory changes.",3],[12,"Workdir","","Only gives status based on index to working directory comparison, not\ncomparing the index to the HEAD.",3],[12,"IndexAndWorkdir","","The default, this roughly matches `git status --porcelain` regarding\nwhich files are included and in what order.",3],[2,"ErrorCode","","An enumeration of possible errors that can happen when working with a git\nrepository."],[12,"GenericError","","Generic error",4],[12,"NotFound","","Requested object could not be found",4],[12,"Exists","","Object exists preventing operation",4],[12,"Ambiguous","","More than one object matches",4],[12,"BufSize","","Output buffer too short to hold data",4],[12,"User","","Operation not allowed on bare repository",4],[12,"BareRepo","","Operation not allowed on bare repository",4],[12,"UnbornBranch","","HEAD refers to branch with no commits",4],[12,"Unmerged","","Merge in progress prevented operation",4],[12,"NotFastForward","","Reference was not fast-forwardable",4],[12,"InvalidSpec","","Name/ref spec was not in a valid format",4],[12,"MergeConflict","","Merge conflicts prevented operation",4],[12,"Locked","","Lock file prevented operation",4],[12,"Modified","","Reference value does not match expected",4],[2,"RepositoryState","","A listing of the possible states that a repository can be in."],[12,"Clean","","",5],[12,"Merge","","",5],[12,"Revert","","",5],[12,"CherryPick","","",5],[12,"Bisect","","",5],[12,"Rebase","","",5],[12,"RebaseInteractive","","",5],[12,"RebaseMerge","","",5],[12,"ApplyMailbox","","",5],[12,"ApplyMailboxOrRebase","","",5],[2,"Direction","","An enumeration of the possible directions for a remote."],[12,"Fetch","","Data will be fetched (read) from this remote.",6],[12,"Push","","Data will be pushed (written) to this remote.",6],[2,"ResetType","","An enumeration of the operations that can be performed for the `reset`\nmethod on a `Repository`."],[12,"Soft","","Move the head to the given commit.",7],[12,"Mixed","","Soft plus reset the index to the commit.",7],[12,"Hard","","Mixed plus changes in the working tree are discarded.",7],[2,"ObjectType","","An enumeration all possible kinds objects may have."],[12,"Any","","An object which corresponds to a any git object",8],[12,"Commit","","An object which corresponds to a git commit",8],[12,"Tree","","An object which corresponds to a git tree",8],[12,"Blob","","An object which corresponds to a git blob",8],[12,"Tag","","An object which corresponds to a git tag",8],[2,"BranchType","","An enumeration for the possible types of branches"],[12,"Local","","A local branch not on a remote.",9],[12,"Remote","","A branch for a remote.",9],[2,"ConfigLevel","","An enumeration of the possible priority levels of a config file."],[12,"System","","System-wide configuration file, e.g. /etc/gitconfig",10],[12,"XDG","","XDG-compatible configuration file, e.g. ~/.config/git/config",10],[12,"Global","","User-specific configuration, e.g. ~/.gitconfig",10],[12,"Local","","Reopsitory specific config, e.g. $PWD/.git/config",10],[12,"App","","Application specific configuration file",10],[12,"Highest","","Highest level available",10],[2,"Delta","","What type of change is described by a `DiffDelta`?"],[12,"Unmodified","","No changes",11],[12,"Added","","Entry does not exist in old version",11],[12,"Deleted","","Entry does not exist in new version",11],[12,"Modified","","Entry content changed between old and new",11],[12,"Renamed","","Entry was renamed wbetween old and new",11],[12,"Copied","","Entry was copied from another old entry",11],[12,"Ignored","","Entry is ignored item in workdir",11],[12,"Untracked","","Entry is untracked item in workdir",11],[12,"Typechange","","Type of entry changed between old and new",11],[12,"Unreadable","","Entry is unreadable",11],[2,"DiffFormat","","Possible output formats for diff data"],[12,"Patch","","full git diff",12],[12,"PatchHeader","","just the headers of the patch",12],[12,"Raw","","like git diff --raw",12],[12,"NameOnly","","like git diff --name-only",12],[12,"NameStatus","","like git diff --name-status",12],[0,"build","","Builder-pattern objects for configuration various git operations."],[1,"RepoBuilder","git2::build","A builder struct which is used to build configuration for cloning a new git\nrepository."],[1,"CheckoutBuilder","","A builder struct for configuring checkouts of a repository."],[4,"Progress","","Checkout progress notification callback."],[10,"new","","Creates a new repository builder with all of the default configuration.",13],[10,"bare","","Indicate whether the repository will be cloned as a bare repository or\nnot.",13],[10,"branch","","Specify the name of the branch to check out after the clone.",13],[10,"signature","","Specify the identity that will be used when updating the reflog.",13],[10,"local","","Set the flag for bypassing the git aware transport mechanism for local\npaths.",13],[10,"hardlinks","","Set the flag for whether hardlinks are used when using a local git-aware\ntransport mechanism.",13],[10,"with_checkout","","Configure the checkout which will be performed by consuming a checkout\nbuilder.",13],[10,"remote_callbacks","","Set the callbacks which will be used to monitor the download progress.",13],[10,"clone","","Clone a remote repository.",13],[10,"new","","Creates a new builder for checkouts with all of its default\nconfiguration.",14],[10,"dry_run","","Indicate that this checkout should perform a dry run by checking for\nconflicts but not make any actual changes.",14],[10,"force","","Take any action necessary to get the working directory to match the\ntarget including potentially discarding modified files.",14],[10,"safe","","Indicate that the checkout should be performed safely, allowing new\nfiles to be created but not overwriting extisting files or changes.",14],[10,"allow_conflicts","","In safe mode, apply safe file updates even when there are conflicts\ninstead of canceling the checkout.",14],[10,"remove_untracked","","Remove untracked files from the working dir.",14],[10,"remove_ignored","","Remove ignored files from the working dir.",14],[10,"update_only","","Only update the contents of files that already exist.",14],[10,"update_index","","Prevents checkout from writing the updated files' information to the\nindex.",14],[10,"refresh","","Indicate whether the index and git attributes should be refreshed from\ndisk before any operations.",14],[10,"skip_unmerged","","Skip files with unmerged index entries.",14],[10,"use_ours","","Indicate whether the checkout should proceed on conflicts by using the\nstage 2 version of the file (\"ours\").",14],[10,"use_theirs","","Indicate whether the checkout should proceed on conflicts by using the\nstage 3 version of the file (\"theirs\").",14],[10,"overwrite_ignored","","Indicate whether ignored files should be overwritten during the checkout.",14],[10,"conflict_style_merge","","Indicate whether a normal merge file should be written for conflicts.",14],[10,"conflict_style_diff3","","Indicates whether to include common ancestor data in diff3 format files\nfor conflicts.",14],[10,"disable_filters","","Indicate whether to apply filters like CRLF conversion.",14],[10,"dir_perm","","Set the mode with which new directories are created.",14],[10,"file_perm","","Set the mode with which new files are created.",14],[10,"path","","Add a path to be checked out.",14],[10,"target_dir","","Set the directory to check out to",14],[10,"ancestor_label","","The name of the common ancestor side of conflicts",14],[10,"our_label","","The name of the common our side of conflicts",14],[10,"their_label","","The name of the common their side of conflicts",14],[10,"progress","","Set a callback to receive notifications of checkout progress.",14],[10,"configure","","Configure a raw checkout options based on this configuration.",14],[10,"from_raw","git2","Create a new object from its raw component.",15],[10,"id","","Get the id (SHA1) of a repository blob",15],[10,"raw","","Get access to the underlying raw pointer.",15],[10,"is_binary","","Determine if the blob content is most certainly binary or not.",15],[10,"content","","Get the content of this blob.",15],[10,"drop","","",15],[10,"wrap","","Creates a new branch from a reference",16],[10,"get","","Gain access to the reference that is this branch",16],[10,"into_reference","","Take ownership of the underlying reference.",16],[10,"delete","","Delete an existing branch reference.",16],[10,"is_head","","Determine if the current local branch is pointed at by HEAD.",16],[10,"rename","","Move/rename an existing local branch reference.",16],[10,"name","","Return the name of the given local or remote branch.",16],[10,"name_bytes","","Return the name of the given local or remote branch.",16],[10,"upstream","","Return the reference supporting the remote tracking branch, given a\nlocal branch reference.",16],[10,"set_upstream","","Set the upstream configuration for a given local branch.",16],[10,"from_raw","","Creates a new iterator from the raw pointer given.",17],[10,"next","","",17],[10,"drop","","",17],[10,"new","","Creates a new empty buffer.",18],[10,"from_raw","","Creates a buffer from its raw component.",18],[10,"as_str","","Attempt to view this buffer as a string slice.",18],[10,"get","","Gain access to the contents of this buffer as a byte slice",18],[10,"raw","","Gain access to the underlying raw buffer.",18],[10,"drop","","",18],[10,"from_raw","","Create a new object from its raw component.",19],[10,"id","","Get the id (SHA1) of a repository commit",19],[10,"tree_id","","Get the id of the tree pointed to by this commit.",19],[10,"tree","","Get the tree pointed to by a commit.",19],[10,"raw","","Get access to the underlying raw pointer.",19],[10,"message","","Get the full message of a commit.",19],[10,"message_bytes","","Get the full message of a commit as a byte slice.",19],[10,"message_encoding","","Get the encoding for the message of a commit, as a string representing a\nstandard encoding name.",19],[10,"message_raw","","Get the full raw message of a commit.",19],[10,"message_raw_bytes","","Get the full raw message of a commit.",19],[10,"raw_header","","Get the full raw text of the commit header.",19],[10,"raw_header_bytes","","Get the full raw text of the commit header.",19],[10,"summary","","Get the short \"summary\" of the git commit message.",19],[10,"summary_bytes","","Get the short \"summary\" of the git commit message.",19],[10,"time","","Get the commit time (i.e. committer time) of a commit.",19],[10,"parents","","Creates a new iterator over the parents of this commit.",19],[10,"parent_ids","","Creates a new iterator over the parents of this commit.",19],[10,"author","","Get the author of this commit.",19],[10,"committer","","Get the committer of this commit.",19],[10,"amend","","Amend this existing commit with all non-`None` values",19],[10,"parent","","Get the specified parent of the commit.",19],[10,"parent_id","","Get the specified parent id of the commit.",19],[10,"next","","",20],[10,"size_hint","","",20],[10,"next_back","","",20],[10,"drop","","",19],[10,"new","","Allocate a new configuration object",21],[10,"open","","Create a new config instance containing a single on-disk file",21],[10,"open_default","","Open the global, XDG and system configuration files",21],[10,"find_global","","Locate the path to the global configuration file",21],[10,"find_system","","Locate the path to the system configuration file",21],[10,"find_xdg","","Locate the path to the global xdg compatible configuration file",21],[10,"from_raw","","Consumes ownership of a raw config pointer, returning a wrapped object.",21],[10,"raw","","Gain access to the underlying raw pointer of this config",21],[10,"add_file","","Add an on-disk config file instance to an existing config",21],[10,"remove","","Delete a config variable from the config file with the highest level\n(usually the local one).",21],[10,"get_bool","","Get the value of a boolean config variable.",21],[10,"get_i32","","Get the value of an integer config variable.",21],[10,"get_i64","","Get the value of an integer config variable.",21],[10,"get_str","","Get the value of a string config variable.",21],[10,"get_bytes","","Get the value of a string config variable as a byte slice.",21],[10,"get_entry","","Get the ConfigEntry for a config variable.",21],[10,"entries","","Iterate over all the config variables",21],[10,"open_global","","Open the global/XDG configuration file according to git's rules",21],[10,"open_level","","Build a single-level focused config object from a multi-level one.",21],[10,"set_bool","","Set the value of a boolean config variable in the config file with the\nhighest level (usually the local one).",21],[10,"set_i32","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",21],[10,"set_i64","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",21],[10,"set_str","","Set the value of a string config variable in the config file with the\nhighest level (usually the local one).",21],[10,"snapshot","","Create a snapshot of the configuration",21],[10,"drop","","",21],[10,"from_raw","","Creates a new config entry from the raw components.",22],[10,"name","","Gets the name of this entry.",22],[10,"name_bytes","","Gets the name of this entry as a byte slice.",22],[10,"value","","Gets the value of this entry.",22],[10,"value_bytes","","Gets the value of this entry as a byte slice.",22],[10,"level","","Gets the configuration level of this entry.",22],[10,"from_raw","","Creates a new iterator from its raw component.",23],[10,"drop","","",23],[10,"from_raw","","Create a new credential object from its raw component.",24],[10,"default","","Create a \"default\" credential usable for Negotiate mechanisms like NTLM\nor Kerberos authentication.",24],[10,"ssh_key_from_agent","","Create a new ssh key credential object used for querying an ssh-agent.",24],[10,"ssh_key","","Create a new passphrase-protected ssh key credential object.",24],[10,"userpass_plaintext","","Create a new plain-text username and password credential object.",24],[10,"credential_helper","","Attempt to read `credential.helper` according to gitcredentials(7) [1]",24],[10,"has_username","","Check whether a credential object contains username information.",24],[10,"raw","","Gain access to the underlying raw credential pointer.",24],[10,"credtype","","Return the type of credentials that this object represents.",24],[10,"unwrap","","Unwrap access to the underlying raw pointer, canceling the destructor",24],[10,"drop","","",24],[10,"new","","Create a new credential helper object which will be used to probe git's\nlocal credential configuration.",0],[10,"username","","Set the username that this credential helper will query with.",0],[10,"config","","Query the specified configuration object to discover commands to\nexecute, usernames to query, etc.",0],[10,"execute","","Execute this helper, attempting to discover a username/password pair.",0],[10,"tree_to_tree","","Create a diff with the difference between two tree objects.",25],[10,"tree_to_index","","Create a diff between a tree and repository index.",25],[10,"index_to_workdir","","Create a diff between the repository index and the workdir directory.",25],[10,"tree_to_workdir","","Create a diff between a tree and the working directory.",25],[10,"tree_to_workdir_with_index","","Create a diff between a tree and the working directory using index data\nto account for staged deletes, tracked files, etc.",25],[10,"from_raw","","Create a new diff from its raw component.",25],[10,"merge","","Merge one diff into another.",25],[10,"deltas","","Returns an iterator over the deltas in this diff.",25],[10,"get_delta","","Return the diff delta for an entry in the diff list.",25],[10,"is_sorted_icase","","Check if deltas are sorted case sensitively or insensitively.",25],[10,"print","","Iterate over a diff generating formatted text output.",25],[10,"stats","","Accumulate diff statistics for all patches.",25],[10,"drop","","",25],[10,"from_raw","","Create a new diff delta from its raw component.",26],[10,"nfiles","","Returns the number of files in this delta.",26],[10,"status","","Returns the status of this entry",26],[10,"old_file","","Return the file which represents the \"from\" side of the diff.",26],[10,"new_file","","Return the file which represents the \"to\" side of the diff.",26],[10,"from_raw","","Create a new diff delta from its raw component.",27],[10,"id","","Returns the Oid of this item.",27],[10,"path_bytes","","Returns the path, in bytes, of the entry relative to the working\ndirectory of the repository.",27],[10,"path","","Returns the path of the entry relative to the working directory of the\nrepository.",27],[10,"size","","Returns the size of this entry, in bytes",27],[10,"new","","Creates a new set of empty diff options.",28],[10,"reverse","","Flag indicating whether the sides of the diff will be reversed.",28],[10,"include_ignored","","Flag indicating whether ignored files are included.",28],[10,"recurse_ignored_dirs","","Flag indicating whether ignored directories are traversed deeply or not.",28],[10,"include_untracked","","Flag indicating whether untracked files are in the diff",28],[10,"recurse_untracked_dirs","","Flag indicating whether untracked directories are deeply traversed or\nnot.",28],[10,"include_unmodified","","Flag indicating whether unmodified files are in the diff.",28],[10,"include_typechange","","If entrabled, then Typechange delta records are generated.",28],[10,"include_typechange_trees","","Event with `include_typechange`, the tree treturned generally shows a\ndeleted blow. This flag correctly labels the tree transitions as a\ntypechange record with the `new_file`'s mode set to tree.",28],[10,"ignore_filemode","","Flag indicating whether file mode changes are ignored.",28],[10,"ignore_submodules","","Flag indicating whether all submodules should be treated as unmodified.",28],[10,"ignore_case","","Flag indicating whether case insensitive filenames should be used.",28],[10,"disable_pathspec_match","","If pathspecs are specified, this flag means that they should be applied\nas an exact match instead of a fnmatch pattern.",28],[10,"skip_binary_check","","Disable updating the `binary` flag in delta records. This is useful when\niterating over a diff if you don't need hunk and data callbacks and want\nto avoid having to load a file completely.",28],[10,"enable_fast_untracked_dirs","","When diff finds an untracked directory, to match the behavior of core\nGit, it scans the contents for ignored and untracked files. If all\ncontents are ignored, then the directory is ignored; if any contents are\nnot ignored, then the directory is untracked. This is extra work that\nmay not matter in many cases.",28],[10,"update_index","","When diff finds a file in the working directory with stat information\ndifferent from the index, but the OID ends up being the same, write the\ncorrect stat information into the index. Note: without this flag, diff\nwill always leave the index untouched.",28],[10,"include_unreadable","","Include unreadable files in the diff",28],[10,"include_unreadable_as_untracked","","Include unreadable files in the diff",28],[10,"force_text","","Treat all files as text, disabling binary attributes and detection.",28],[10,"force_binary","","Treat all files as binary, disabling text diffs",28],[10,"ignore_whitespace","","Ignore all whitespace",28],[10,"ignore_whitespace_change","","Ignore changes in the amount of whitespace",28],[10,"ignore_whitespace_eol","","Ignore whitespace at tend of line",28],[10,"show_untracked_content","","When generating patch text, include the content of untracked files.",28],[10,"show_unmodified","","When generating output, include the names of unmodified files if they\nare included in the `Diff`. Normally these are skipped in the formats\nthat list files (e.g. name-only, name-status, raw). Even with this these\nwill not be included in the patch format.",28],[10,"patience","","Use the \"patience diff\" algorithm",28],[10,"minimal","","Take extra time to find the minimal diff",28],[10,"show_binary","","Include the necessary deflate/delta information so that `git-apply` can\napply given diff information to binary files.",28],[10,"context_lines","","Set the number of unchanged lines that define the boundary of a hunk\n(and to display before and after).",28],[10,"interhunk_lines","","Set the maximum number of unchanged lines between hunk boundaries before\nthe hunks will be merged into one.",28],[10,"id_abbrev","","The default value for this is `core.abbrev` or 7 if unset.",28],[10,"max_size","","Maximum size (in bytes) above which a blob will be marked as binary\nautomatically.",28],[10,"old_prefix","","The virtual \"directory\" to prefix old file names with in hunk headers.",28],[10,"new_prefix","","The virtual \"directory\" to prefix new file names with in hunk headers.",28],[10,"pathspec","","Add to the array of paths/fnmatch patterns to constrain the diff.",28],[10,"raw","","Acquire a pointer to the underlying raw options.",28],[10,"next","","",29],[10,"size_hint","","",29],[10,"next_back","","",29],[10,"from_raw","","Create a new diff line from its raw component.",30],[10,"old_lineno","","Line number in old file or `None` for added line",30],[10,"new_lineno","","Line number in new file or `None` for deleted line",30],[10,"num_lines","","Number of newline characters in content",30],[10,"content_offset","","Offset in the original file to the content",30],[10,"content","","Content of this line as bytes.",30],[10,"origin","","",30],[10,"from_raw","","Create a new diff line from its raw component.",31],[10,"old_start","","Starting line number in old_file",31],[10,"old_lines","","Number of lines in old_file",31],[10,"new_start","","Starting line number in new_file",31],[10,"new_lines","","Number of lines in new_file",31],[10,"header","","Header text",31],[10,"from_raw","","Create diff stats from its raw component.",32],[10,"files_changed","","Get the total number of files chaned in a diff.",32],[10,"insertions","","Get the total number of insertions in a diff",32],[10,"deletions","","Get the total number of deletions in a diff",32],[10,"drop","","",32],[10,"last_error","","Returns the last error, or `None` if one is not available.",33],[10,"from_str","","Creates a new error from the given string as the error.",33],[10,"code","","Return the error code associated with this error.",33],[10,"raw_code","","Return the raw error code associated with this error.",33],[10,"message","","Return the message associated with this error",33],[10,"description","","",33],[10,"detail","","",33],[10,"fmt","","",33],[10,"drop","","",33],[10,"new","","Creates a new in-memory index.",34],[10,"open","","Create a new bare Git index object as a memory representation of the Git\nindex file in 'index_path', without a repository to back it.",34],[10,"from_raw","","Creates a new index from a raw pointer.",34],[10,"add","","Add or update an index entry from an in-memory struct",34],[10,"add_path","","Add or update an index entry from a file on disk",34],[10,"add_all","","Add or update index entries matching files in the working directory.",34],[10,"raw","","Get access to the underlying raw index pointer.",34],[10,"clear","","Clear the contents (all the entries) of an index object.",34],[10,"len","","Get the count of entries currently in the index",34],[10,"get","","Get one of the entries in the index by its position.",34],[10,"iter","","Get an iterator over the entries in this index.",34],[10,"get_path","","Get one of the entries in the index by its path.",34],[10,"path","","Get the full path to the index file on disk.",34],[10,"read","","Update the contents of an existing index object in memory by reading\nfrom the hard disk.",34],[10,"read_tree","","Read a tree into the index file with stats",34],[10,"remove","","Remove an entry from the index",34],[10,"remove_path","","Remove an index entry corresponding to a file on disk.",34],[10,"remove_dir","","Remove all entries from the index under a given directory.",34],[10,"remove_all","","Remove all matching index entries.",34],[10,"update_all","","Update all index entries to match the working directory",34],[10,"write","","Write an existing index object from memory back to disk using an atomic\nfile lock.",34],[10,"write_tree","","Write the index as a tree.",34],[10,"write_tree_to","","Write the index as a tree to the given repository",34],[10,"drop","","",34],[10,"next","","",35],[10,"from_raw","","Creates a new entry from its raw pointer.",1],[10,"configure","","Configures a raw git entry from this entry",1],[10,"from_raw","","Create a new note from its raw component.",36],[10,"author","","Get the note author",36],[10,"committer","","Get the note committer",36],[10,"message_bytes","","Get the note message, in bytes.",36],[10,"message","","Get the note message as a string, returning `None` if it is not UTF-8.",36],[10,"id","","Get the note object's id",36],[10,"drop","","",36],[10,"from_raw","","Create a new note iterator from its raw component.",37],[10,"next","","",37],[10,"drop","","",37],[10,"from_raw","","Create a new object from its raw component.",38],[10,"id","","Get the id (SHA1) of a repository object",38],[10,"raw","","Get access to the underlying raw pointer.",38],[10,"kind","","Get the object type of an object.",38],[10,"peel","","Recursively peel an object until an object of the specified type is met.",38],[10,"short_id","","Get a short abbreviated OID string for the object",38],[10,"clone","","",38],[10,"drop","","",38],[10,"from_raw","","Create a new Oid from a raw libgit2 oid structure.",39],[10,"from_str","","Parse a hex-formatted object id into an Oid structure.",39],[10,"from_bytes","","Parse a raw object id into an Oid structure.",39],[10,"raw","","Gain access to the underlying raw oid pointer",39],[10,"as_bytes","","View this OID as a byte-slice 20 bytes in length.",39],[10,"is_zero","","Test if this OID is all zeros.",39],[10,"fmt","","Hex-encode this Oid into a formatter.",39],[10,"eq","","",39],[10,"partial_cmp","","",39],[10,"cmp","","",39],[10,"clone","","",39],[10,"hash","","",39],[10,"new","","Creates a new pathspec from a list of specs to match against.",40],[10,"from_raw","","Consumes ownership of a pathspec pointer, returning the wrapped\nstructure.",40],[10,"match_tree","","Match a pathspec against files in a tree.",40],[10,"match_index","","This matches the pathspec against the files in the repository index.",40],[10,"match_workdir","","Match a pathspec against the working directory of a repository.",40],[10,"matches_path","","Try to match a path against a pathspec",40],[10,"drop","","",40],[10,"from_raw","","Consumes ownership of a raw pointer",41],[10,"entries","","Returns an iterator over the matching filenames in this list.",41],[10,"entry","","Get a matching filename by position.",41],[10,"diff_entries","","Returns an iterator over the matching diff entries in this list.",41],[10,"diff_entry","","Get a matching diff delta by position.",41],[10,"failed_entries","","Returns an iterator over the non-matching entries in this list.",41],[10,"failed_entry","","Get an original pathspec string that had no matches.",41],[10,"drop","","",41],[10,"next","","",42],[10,"size_hint","","",42],[10,"next_back","","",42],[10,"next","","",43],[10,"size_hint","","",43],[10,"next_back","","",43],[10,"next","","",44],[10,"size_hint","","",44],[10,"next_back","","",44],[10,"from_raw","","Create a new push from its raw component.",45],[10,"raw","","Get access to the underlying raw pointer.",45],[10,"add_refspec","","Add a refspec to be pushed",45],[10,"finish","","Actually push all given refspecs",45],[10,"update_tips","","Update remote tips after a push",45],[10,"statuses","","Return each status entry",45],[10,"drop","","",45],[10,"from_raw","","Creates a new reference from a raw pointer.",46],[10,"is_valid_name","","Ensure the reference name is well-formed.",46],[10,"raw","","Get access to the underlying raw pointer.",46],[10,"delete","","Delete an existing reference.",46],[10,"is_branch","","Check if a reference is a local branch.",46],[10,"is_note","","Check if a reference is a note.",46],[10,"is_remote","","Check if a reference is a remote tracking branch",46],[10,"is_tag","","Check if a reference is a tag",46],[10,"name","","Get the full name of a reference.",46],[10,"name_bytes","","Get the full name of a reference.",46],[10,"shorthand","","Get the full shorthand of a reference.",46],[10,"shorthand_bytes","","Get the full shorthand of a reference.",46],[10,"target","","Get the OID pointed to by a direct reference.",46],[10,"target_peel","","Return the peeled OID target of this reference.",46],[10,"symbolic_target","","Get full name to the reference pointed to by a symbolic reference.",46],[10,"symbolic_target_bytes","","Get full name to the reference pointed to by a symbolic reference.",46],[10,"resolve","","Resolve a symbolic reference to a direct reference.",46],[10,"rename","","Rename an existing reference.",46],[10,"partial_cmp","","",46],[10,"cmp","","",46],[10,"eq","","",46],[10,"drop","","",46],[10,"from_raw","","Creates a new iterator from its raw underlying pointer.",47],[10,"next","","",47],[10,"drop","","",47],[10,"new","","Consumes a `References` iterator to create an iterator over just the\nname of some references.",48],[10,"next","","",48],[10,"from_raw","","Creates a new refspec from the raw components.",49],[10,"direction","","Get the refspec's direction.",49],[10,"dst","","Get the destination specifier.",49],[10,"dst_bytes","","Get the destination specifier, in bytes.",49],[10,"dst_matches","","Check if a refspec's destination descriptor matches a reference",49],[10,"src","","Get the source specifier.",49],[10,"src_bytes","","Get the source specifier, in bytes.",49],[10,"src_matches","","Check if a refspec's source descriptor matches a reference",49],[10,"is_force","","Get the force update setting.",49],[10,"str","","Get the refspec's string.",49],[10,"bytes","","Get the refspec's string as a byte array",49],[10,"from_raw","","Creates a new remote from its raw pointer.",50],[10,"is_valid_name","","Ensure the remote name is well-formed.",50],[10,"name","","Get the remote's name.",50],[10,"name_bytes","","Get the remote's name, in bytes.",50],[10,"url","","Get the remote's url.",50],[10,"url_bytes","","Get the remote's url as a byte array.",50],[10,"pushurl","","Get the remote's pushurl.",50],[10,"pushurl_bytes","","Get the remote's pushurl as a byte array.",50],[10,"connect","","Open a connection to a remote.",50],[10,"connected","","Check whether the remote is connected",50],[10,"disconnect","","Disconnect from the remote",50],[10,"save","","Save a remote to its repository's configuration",50],[10,"add_fetch","","Add a fetch refspec to the remote",50],[10,"add_push","","Add a push refspec to the remote",50],[10,"set_url","","Set the remote's url",50],[10,"set_pushurl","","Set the remote's pushurl.",50],[10,"set_update_fetchhead","","Sets the update FETCH_HEAD setting. By default, FETCH_HEAD will be\nupdated on every fetch.",50],[10,"set_fetch_refspecs","","Set the remote's list of fetch refspecs",50],[10,"set_push_refspecs","","Set the remote's list of push refspecs",50],[10,"clear_refspecs","","Clear the refspecs",50],[10,"download","","Download and index the packfile",50],[10,"refspecs","","Get the number of refspecs for a remote",50],[10,"fetch","","Download new data and update tips",50],[10,"update_tips","","Update the tips to the new state",50],[10,"update_fetchhead","","Retrieve the update FETCH_HEAD setting.",50],[10,"push","","Create a new push object",50],[10,"set_callbacks","","Set the callbacks to be invoked when the transfer is in-progress.",50],[10,"stats","","Get the statistics structure that is filled in by the fetch operation.",50],[10,"list","","Get the remote repository's reference advertisement list.",50],[10,"next","","",51],[10,"clone","","",50],[10,"drop","","",50],[10,"is_local","","Flag if this is available locally.",52],[10,"oid","","",52],[10,"loid","","",52],[10,"name","","",52],[10,"symref_target","","",52],[10,"new","","Creates a new set of empty callbacks",53],[10,"credentials","","The callback through which to fetch credentials if required.",53],[10,"transfer_progress","","The callback through which progress is monitored.",53],[10,"sideband_progress","","Textual progress from the remote.",53],[10,"update_tips","","Each time a reference is updated locally, the callback will be called\nwith information about it.",53],[10,"raw","","Convert this set of callbacks to a raw callbacks structure.",53],[10,"from_raw","","Creates a new progress structure from its raw counterpart.",54],[10,"total_objects","","Number of objects in the packfile being downloaded",54],[10,"indexed_objects","","Received objects that have been hashed",54],[10,"received_objects","","Objects which have been downloaded",54],[10,"local_objects","","Locally-available objects that have been injected in order to fix a thin\npack.",54],[10,"total_deltas","","Number of deltas in the packfile being downloaded",54],[10,"indexed_deltas","","Received deltas that have been hashed.",54],[10,"received_bytes","","Size of the packfile received up to now",54],[10,"to_owned","","Convert this to an owned version of `Progress`.",54],[10,"open","","Attempt to open an already-existing repository at `path`.",55],[10,"discover","","Attempt to open an already-existing repository at or above `path`",55],[10,"init","","Creates a new repository in the specified folder.",55],[10,"init_bare","","Creates a new `--bare` repository in the specified folder.",55],[10,"init_opts","","Creates a new `--bare` repository in the specified folder.",55],[10,"clone","","Clone a remote repository.",55],[10,"from_raw","","Create a repository from the raw underlying pointer.",55],[10,"revparse","","Execute a rev-parse operation against the `spec` listed.",55],[10,"revparse_single","","Find a single object, as specified by a revision string.",55],[10,"is_bare","","Tests whether this repository is a bare repository or not.",55],[10,"is_shallow","","Tests whether this repository is a shallow clone.",55],[10,"is_empty","","Tests whether this repository is empty.",55],[10,"path","","Returns the path to the `.git` folder for normal repositories or the\nrepository itself for bare repositories.",55],[10,"state","","Returns the current state of this repository",55],[10,"workdir","","Get the path of the working directory for this repository.",55],[10,"namespace","","Get the currently active namespace for this repository.",55],[10,"namespace_bytes","","Get the currently active namespace for this repository as a byte array.",55],[10,"remotes","","List all remotes for a given repository",55],[10,"find_remote","","Get the information for a particular remote",55],[10,"remote","","Add a remote with the default fetch refspec to the repository's\nconfiguration.",55],[10,"remote_anonymous","","Create an anonymous remote",55],[10,"remote_rename","","Give a remote a new name",55],[10,"remote_delete","","Delete an existing persisted remote.",55],[10,"raw","","Get the underlying raw repository",55],[10,"reset","","Sets the current head to the specified object and optionally resets\nthe index and working tree to match.",55],[10,"reset_default","","Updates some entries in the index from the target commit tree.",55],[10,"head","","Retrieve and resolve the reference pointed at by HEAD.",55],[10,"references","","Create an iterator for the repo's references",55],[10,"references_glob","","Create an iterator for the repo's references that match the specified\nglob",55],[10,"submodules","","Load all submodules for this repository and return them.",55],[10,"statuses","","Gather file status information and populate the returned structure.",55],[10,"status_should_ignore","","Test if the ignore rules apply to a given file.",55],[10,"status_file","","Get file status for a single file.",55],[10,"branches","","Create an iterator which loops over the requested branches.",55],[10,"index","","Get the Index file for this repository.",55],[10,"config","","Get the configuration file for this repository.",55],[10,"blob","","Write an in-memory buffer to the ODB as a blob.",55],[10,"blob_path","","Read a file from the filesystem and write its content to the Object\nDatabase as a loose blob",55],[10,"find_blob","","Lookup a reference to one of the objects in a repository.",55],[10,"branch","","Create a new branch pointing at a target commit",55],[10,"find_branch","","Lookup a branch by its name in a repository.",55],[10,"commit","","Create new commit in the repository",55],[10,"find_commit","","Lookup a reference to one of the commits in a repository.",55],[10,"find_object","","Lookup a reference to one of the objects in a repository.",55],[10,"reference","","Create a new direct reference.",55],[10,"reference_symbolic","","Create a new symbolic reference.",55],[10,"find_reference","","Lookup a reference to one of the objects in a repository.",55],[10,"refname_to_id","","Lookup a reference by name and resolve immediately to OID.",55],[10,"signature","","Create a new action signature with default user and now timestamp.",55],[10,"submodule","","Set up a new git submodule for checkout.",55],[10,"find_submodule","","Lookup submodule information by name or path.",55],[10,"find_tree","","Lookup a reference to one of the objects in a repository.",55],[10,"tag","","Create a new tag in the repository from an object",55],[10,"find_tag","","Lookup a tag object from the repository.",55],[10,"tag_delete","","Delete an existing tag reference.",55],[10,"tag_names","","Get a list with all the tags in the repository.",55],[10,"checkout_head","","Updates files in the index and the working tree to match the content of\nthe commit pointed at by HEAD.",55],[10,"checkout_index","","Updates files in the working tree to match the content of the index.",55],[10,"checkout_tree","","Updates files in the index and working tree to match the content of the\ntree pointed at by the treeish.",55],[10,"note","","Add a note for an object",55],[10,"note_default_ref","","Get the default notes reference for this repository",55],[10,"notes","","Creates a new iterator for notes in this repository.",55],[10,"find_note","","Read the note for an object.",55],[10,"note_delete","","Remove the note for an object.",55],[10,"revwalk","","Create a revwalk that can be used to traverse the commit graph.",55],[10,"merge_base","","Find a merge base between two commits",55],[10,"drop","","",55],[10,"new","","Creates a default set of initialization options.",56],[10,"bare","","Create a bare repository with no working directory.",56],[10,"no_reinit","","Return an error if the repository path appears to already be a git\nrepository.",56],[10,"no_dotgit_dir","","Normally a '/.git/' will be appended to the repo apth for non-bare repos\n(if it is not already there), but passing this flag prevents that\nbehavior.",56],[10,"mkdir","","Make the repo path (and workdir path) as needed. The \".git\" directory\nwill always be created regardless of this flag.",56],[10,"mkpath","","Recursively make all components of the repo and workdir path sas\nnecessary.",56],[10,"mode","","Set to one of the `RepositoryInit` constants, or a custom value.",56],[10,"external_template","","Enable or disable using external templates.",56],[10,"workdir_path","","The path do the working directory.",56],[10,"description","","If set, this will be used to initialize the \"description\" file in the\nrepository instead of using the template content.",56],[10,"template_path","","When the `external_template` option is set, this is the first location\nto check for the template directory.",56],[10,"initial_head","","The name of the head to point HEAD at.",56],[10,"origin_url","","If set, then after the rest of the repository initialization is\ncompleted an `origin` remote will be added pointing to this URL.",56],[10,"raw","","Creates a set of raw init options to be used with\n`git_repository_init_ext`.",56],[10,"from_objects","","Assembles a new revspec from the from/to components.",57],[10,"from","","Access the `from` range of this revspec.",57],[10,"to","","Access the `to` range of this revspec.",57],[10,"mode","","Returns the intent of the revspec.",57],[10,"from_raw","","Creates a new revwalk from its raw pointer.",58],[10,"raw","","Get access to the underlying raw pointer.",58],[10,"reset","","Reset a revwalk to allow re-configuring it.",58],[10,"set_sorting","","Set the order in which commits are visited.",58],[10,"simplify_first_parent","","Simplify the history by first-parent",58],[10,"push","","Mark a commit to start traversal from.",58],[10,"push_head","","Push the repository's HEAD",58],[10,"push_glob","","Push matching references",58],[10,"push_range","","Push and hide the respective endpoints of the given range.",58],[10,"push_ref","","Push the OID pointed to by a reference",58],[10,"hide","","Mark a commit as not of interest to this revwalk.",58],[10,"hide_head","","Hide the repository's HEAD",58],[10,"hide_glob","","Hide matching references.",58],[10,"hide_ref","","Hide the OID pointed to by a reference.",58],[10,"drop","","",58],[10,"next","","",58],[10,"now","","Create a new action signature with a timestamp of 'now'.",59],[10,"new","","Create a new action signature.",59],[10,"from_raw","","Consumes ownership of a raw signature pointer",59],[10,"from_raw_const","","Creates a new signature from the give raw pointer, tied to the lifetime\nof the given object.",59],[10,"name","","Gets the name on the signature.",59],[10,"name_bytes","","Gets the name on the signature as a byte slice.",59],[10,"email","","Gets the email on the signature.",59],[10,"email_bytes","","Gets the email on the signature as a byte slice.",59],[10,"when","","Get the `when` of this signature.",59],[10,"raw","","Get access to the underlying raw signature",59],[10,"clone","","",59],[10,"drop","","",59],[10,"new","","Creates a new blank set of status options.",60],[10,"show","","Select the files on which to report status.",60],[10,"pathspec","","Add a path pattern to match (using fnmatch-style matching).",60],[10,"include_untracked","","Flag whether untracked files will be included.",60],[10,"include_ignored","","Flag whether ignored files will be included.",60],[10,"include_unmodified","","Flag to include unmodified files.",60],[10,"exclude_submodules","","Flag that submodules should be skipped.",60],[10,"recurse_untracked_dirs","","Flag that all files in untracked directories should be included.",60],[10,"disable_pathspec_match","","Indicates that the given paths should be treated as literals paths, note\npatterns.",60],[10,"recurse_ignored_dirs","","Indicates that the contents of ignored directories should be included in\nthe status.",60],[10,"renames_head_to_index","","Indicates that rename detection should be processed between the head.",60],[10,"renames_index_to_workdir","","Indicates that rename detection should be run between the index and the\nworking directory.",60],[10,"sort_case_sensitively","","Override the native case sensitivity for the file system and force the\noutput to be in case sensitive order.",60],[10,"sort_case_insensitively","","Override the native case sensitivity for the file system and force the\noutput to be in case-insensitive order.",60],[10,"renames_from_rewrites","","Indicates that rename detection should include rewritten files.",60],[10,"no_refresh","","Bypasses the default status behavior of doing a \"soft\" index reload.",60],[10,"update_index","","Refresh the stat cache in the index for files are unchanged but have\nout of date stat information in the index.",60],[10,"include_unreadable","","",60],[10,"include_unreadable_as_untracked","","",60],[10,"raw","","Get a pointer to the inner list of status options.",60],[10,"from_raw","","Create a new statuses iterator from its raw component.",61],[10,"get","","Gets a status entry from this list at the specified index.",61],[10,"len","","Gets the count of status entries in this list.",61],[10,"iter","","Returns an iterator over the statuses in this list.",61],[10,"drop","","",61],[10,"next","","",62],[10,"size_hint","","",62],[10,"next_back","","",62],[10,"from_raw","","Create a new status entry from its raw component.",63],[10,"path_bytes","","Access the bytes for this entry's corresponding pathname",63],[10,"path","","Access this entry's path name as a string.",63],[10,"status","","Access the status flags for this file",63],[10,"head_to_index","","Access detailed information about the differences between the file in\nHEAD and the file in the index.",63],[10,"index_to_workdir","","Access detailed information about the differences between the file in\nthe index and the file in the working directory.",63],[10,"from_raw","","Creates a new string array from the raw representation.",64],[10,"get","","Returns None if the i'th string is not utf8 or if i is out of bounds.",64],[10,"get_bytes","","Returns None if `i` is out of bounds.",64],[10,"iter","","Returns an iterator over the strings contained within this array.",64],[10,"iter_bytes","","Returns an iterator over the strings contained within this array,\nyielding byte slices.",64],[10,"len","","Returns the number of strings in this array.",64],[10,"next","","",65],[10,"next","","",66],[10,"drop","","",64],[10,"from_raw","","Create a new object from its raw component.",67],[10,"branch","","Get the submodule's branch.",67],[10,"branch_bytes","","Get the branch for the submodule.",67],[10,"url","","Get the submodule's url.",67],[10,"url_bytes","","Get the url for the submodule.",67],[10,"name","","Get the submodule's name.",67],[10,"name_bytes","","Get the name for the submodule.",67],[10,"path","","Get the path for the submodule.",67],[10,"head_id","","Get the OID for the submodule in the current HEAD tree.",67],[10,"index_id","","Get the OID for the submodule in the index.",67],[10,"workdir_id","","Get the OID for the submodule in the current working directory.",67],[10,"init","","Copy submodule info into \".git/config\" file.",67],[10,"open","","Open the repository for a submodule.",67],[10,"raw","","Access the underlying raw git submodule pointer.",67],[10,"reload","","Reread submodule info from config, index, and HEAD.",67],[10,"save","","Write submodule settings to .gitmodules file.",67],[10,"sync","","Copy submodule remote info into submodule repo.",67],[10,"add_to_index","","Add current submodule HEAD commit to index of superproject.",67],[10,"add_finalize","","Resolve the setup of a new git submodule.",67],[10,"status","","Get the status for a submodule.",67],[10,"drop","","",67],[10,"from_raw","","Create a new tag from its raw component.",68],[10,"id","","Get the id (SHA1) of a repository tag",68],[10,"message","","Get the message of a tag",68],[10,"message_bytes","","Get the message of a tag",68],[10,"name","","Get the name of a tag",68],[10,"name_bytes","","Get the name of a tag",68],[10,"peel","","Recursively peel a tag until a non tag git_object is found",68],[10,"tagger","","Get the tagger (author) of a tag",68],[10,"target","","Get the tagged object of a tag",68],[10,"target_id","","Get the OID of the tagged object of a tag",68],[10,"target_type","","Get the OID of the tagged object of a tag",68],[10,"raw","","Get access to the underlying raw pointer.",68],[10,"drop","","",68],[10,"new","","Creates a new time structure from its components.",69],[10,"from_raw","","Construct a new `Time` from a raw component",69],[10,"seconds","","Return the time, in seconds, from epoch",69],[10,"offset_minutes","","Return the timezone offset, in minutes",69],[10,"new","","Creates a new time structure from its components.",70],[10,"from_raw","","Construct a new `Time` from a raw component",70],[10,"seconds","","Returns the number of seconds in the second component of this time.",70],[10,"nanoseconds","","Returns the nanosecond component of this time.",70],[10,"from_raw","","Create a new object from its raw component.",71],[10,"id","","Get the id (SHA1) of a repository object",71],[10,"raw","","Get access to the underlying raw pointer.",71],[10,"len","","Get the number of entries listed in this tree.",71],[10,"get_id","","Lookup a tree entry by SHA value.",71],[10,"get","","Lookup a tree entry by its position in the tree",71],[10,"get_name","","Lookup a tree entry by its filename",71],[10,"get_path","","Retrieve a tree entry contained in a tree or in any of its subtrees,\ngiven its relative path.",71],[10,"drop","","",71],[10,"from_raw_const","","Create a new tree entry from the raw pointer provided.",72],[10,"from_raw","","Create a new tree entry from the raw pointer provided.",72],[10,"raw","","Gain access to the underlying raw pointer for this tree entry.",72],[10,"id","","Get the id of the object pointed by the entry",72],[10,"name","","Get the filename of a tree entry",72],[10,"name_bytes","","Get the filename of a tree entry",72],[10,"to_object","","Convert a tree entry to the object it points to.",72],[10,"kind","","Get the type of the object pointed by the entry",72],[10,"filemode","","Get the UNIX file attributes of a tree entry",72],[10,"filemode_raw","","Get the raw UNIX file attributes of a tree entry",72],[10,"clone","","",72],[10,"partial_cmp","","",72],[10,"cmp","","",72],[10,"eq","","",72],[10,"drop","","",72],[4,"IndexMatchedPath","","A callback function to filter index matches."],[4,"Credentials","","Callback used to acquire credentials for when a remote is fetched."],[4,"TransferProgress","","Callback to be invoked while a transfer is in progress."],[4,"TransportMessage","","Callback for receiving messages delivered by the transport."],[4,"UpdateTips","","Callback for whenever a reference is updated locally."],[18,"SORT_NONE","",""],[18,"SORT_TOPOLOGICAL","",""],[18,"SORT_TIME","",""],[18,"SORT_REVERSE","",""],[18,"USER_PASS_PLAINTEXT","",""],[18,"SSH_KEY","",""],[18,"SSH_CUSTOM","",""],[18,"DEFAULT","",""],[18,"SSH_INTERACTIVE","",""],[18,"ADD_DEFAULT","",""],[18,"ADD_FORCE","",""],[18,"ADD_DISABLE_PATHSPEC_MATCH","",""],[18,"ADD_CHECK_PATHSPEC","",""],[18,"REVPARSE_SINGLE","",""],[18,"REVPARSE_RANGE","",""],[18,"REVPARSE_MERGE_BASE","",""],[18,"STATUS_CURRENT","",""],[18,"STATUS_INDEX_NEW","",""],[18,"STATUS_INDEX_MODIFIED","",""],[18,"STATUS_INDEX_DELETED","",""],[18,"STATUS_INDEX_RENAMED","",""],[18,"STATUS_INDEX_TYPECHANGE","",""],[18,"STATUS_WT_NEW","",""],[18,"STATUS_WT_MODIFIED","",""],[18,"STATUS_WT_DELETED","",""],[18,"STATUS_WT_TYPECHANGE","",""],[18,"STATUS_WT_RENAMED","",""],[18,"STATUS_IGNORED","",""],[18,"REPOSITORY_INIT_SHARED_UMASK","","Use permissions configured by umask - the default"],[18,"REPOSITORY_INIT_SHARED_GROUP","","Use `--shared=group` behavior, chmod'ing the new repo to be group writable and \"g+sx\" for sticky group assignment"],[18,"REPOSITORY_INIT_SHARED_ALL","","Use `--shared=all` behavior, adding world readability."],[18,"SUBMODULE_STATUS_IN_HEAD","",""],[18,"SUBMODULE_STATUS_IN_INDEX","",""],[18,"SUBMODULE_STATUS_IN_CONFIG","",""],[18,"SUBMODULE_STATUS_IN_WD","",""],[18,"SUBMODULE_STATUS_INDEX_ADDED","",""],[18,"SUBMODULE_STATUS_INDEX_DELETED","",""],[18,"SUBMODULE_STATUS_INDEX_MODIFIED","",""],[18,"SUBMODULE_STATUS_WD_UNINITIALIZED","",""],[18,"SUBMODULE_STATUS_WD_ADDED","",""],[18,"SUBMODULE_STATUS_WD_DELETED","",""],[18,"SUBMODULE_STATUS_WD_MODIFIED","",""],[18,"SUBMODULE_STATUS_WD_INDEX_MODIFIED","",""],[18,"SUBMODULE_STATUS_WD_WD_MODIFIED","",""],[18,"SUBMODULE_STATUS_WD_UNTRACKED","",""],[18,"PATHSPEC_DEFAULT","",""],[18,"PATHSPEC_IGNORE_CASE","",""],[18,"PATHSPEC_USE_CASE","",""],[18,"PATHSPEC_NO_GLOB","",""],[18,"PATHSPEC_NO_MATCH_ERROR","",""],[18,"PATHSPEC_FIND_FAILURES","",""],[18,"PATHSPEC_FAILURES_ONLY","",""],[10,"fmt","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"fmt","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"eq","","",8],[10,"ne","","",8],[10,"fmt","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"fmt","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"hash","","",73],[10,"cmp","","",73],[10,"partial_cmp","","",73],[10,"lt","","",73],[10,"le","","",73],[10,"gt","","",73],[10,"ge","","",73],[10,"clone","","",73],[10,"eq","","",73],[10,"ne","","",73],[10,"empty","","Returns an empty set of flags.",73],[10,"all","","Returns the set containing all flags.",73],[10,"bits","","Returns the raw value of the flags currently stored.",73],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",73],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",73],[10,"is_empty","","Returns `true` if no flags are currently stored.",73],[10,"is_all","","Returns `true` if all flags are currently set.",73],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",73],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",73],[10,"insert","","Inserts the specified flags in-place.",73],[10,"remove","","Removes the specified flags in-place.",73],[10,"toggle","","Toggles the specified flags in-place.",73],[10,"bitor","","Returns the union of the two sets of flags.",73],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",73],[10,"bitand","","Returns the intersection between the two sets of flags.",73],[10,"sub","","Returns the set difference of the two sets of flags.",73],[10,"not","","Returns the complement of this set of flags.",73],[10,"hash","","",74],[10,"cmp","","",74],[10,"partial_cmp","","",74],[10,"lt","","",74],[10,"le","","",74],[10,"gt","","",74],[10,"ge","","",74],[10,"clone","","",74],[10,"eq","","",74],[10,"ne","","",74],[10,"empty","","Returns an empty set of flags.",74],[10,"all","","Returns the set containing all flags.",74],[10,"bits","","Returns the raw value of the flags currently stored.",74],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",74],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",74],[10,"is_empty","","Returns `true` if no flags are currently stored.",74],[10,"is_all","","Returns `true` if all flags are currently set.",74],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74],[10,"insert","","Inserts the specified flags in-place.",74],[10,"remove","","Removes the specified flags in-place.",74],[10,"toggle","","Toggles the specified flags in-place.",74],[10,"bitor","","Returns the union of the two sets of flags.",74],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",74],[10,"bitand","","Returns the intersection between the two sets of flags.",74],[10,"sub","","Returns the set difference of the two sets of flags.",74],[10,"not","","Returns the complement of this set of flags.",74],[10,"hash","","",75],[10,"cmp","","",75],[10,"partial_cmp","","",75],[10,"lt","","",75],[10,"le","","",75],[10,"gt","","",75],[10,"ge","","",75],[10,"clone","","",75],[10,"eq","","",75],[10,"ne","","",75],[10,"empty","","Returns an empty set of flags.",75],[10,"all","","Returns the set containing all flags.",75],[10,"bits","","Returns the raw value of the flags currently stored.",75],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75],[10,"is_empty","","Returns `true` if no flags are currently stored.",75],[10,"is_all","","Returns `true` if all flags are currently set.",75],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75],[10,"insert","","Inserts the specified flags in-place.",75],[10,"remove","","Removes the specified flags in-place.",75],[10,"toggle","","Toggles the specified flags in-place.",75],[10,"bitor","","Returns the union of the two sets of flags.",75],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",75],[10,"bitand","","Returns the intersection between the two sets of flags.",75],[10,"sub","","Returns the set difference of the two sets of flags.",75],[10,"not","","Returns the complement of this set of flags.",75],[10,"hash","","",76],[10,"cmp","","",76],[10,"partial_cmp","","",76],[10,"lt","","",76],[10,"le","","",76],[10,"gt","","",76],[10,"ge","","",76],[10,"clone","","",76],[10,"eq","","",76],[10,"ne","","",76],[10,"empty","","Returns an empty set of flags.",76],[10,"all","","Returns the set containing all flags.",76],[10,"bits","","Returns the raw value of the flags currently stored.",76],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",76],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",76],[10,"is_empty","","Returns `true` if no flags are currently stored.",76],[10,"is_all","","Returns `true` if all flags are currently set.",76],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76],[10,"insert","","Inserts the specified flags in-place.",76],[10,"remove","","Removes the specified flags in-place.",76],[10,"toggle","","Toggles the specified flags in-place.",76],[10,"bitor","","Returns the union of the two sets of flags.",76],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",76],[10,"bitand","","Returns the intersection between the two sets of flags.",76],[10,"sub","","Returns the set difference of the two sets of flags.",76],[10,"not","","Returns the complement of this set of flags.",76],[10,"str","","Convert an object type to its string representation.",8],[10,"is_loose","","Determine if the given git_otype is a valid loose object type.",8],[10,"from_raw","","Convert a raw git_otype to an ObjectType",8],[10,"raw","","Convert this kind into its raw representation",8],[10,"from_str","","Convert a string object type representation to its object type.",8],[10,"fmt","","",8],[10,"from_raw","","Converts a raw configuration level to a ConfigLevel",10],[10,"hash","","",77],[10,"cmp","","",77],[10,"partial_cmp","","",77],[10,"lt","","",77],[10,"le","","",77],[10,"gt","","",77],[10,"ge","","",77],[10,"clone","","",77],[10,"eq","","",77],[10,"ne","","",77],[10,"empty","","Returns an empty set of flags.",77],[10,"all","","Returns the set containing all flags.",77],[10,"bits","","Returns the raw value of the flags currently stored.",77],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77],[10,"is_empty","","Returns `true` if no flags are currently stored.",77],[10,"is_all","","Returns `true` if all flags are currently set.",77],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77],[10,"insert","","Inserts the specified flags in-place.",77],[10,"remove","","Removes the specified flags in-place.",77],[10,"toggle","","Toggles the specified flags in-place.",77],[10,"bitor","","Returns the union of the two sets of flags.",77],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",77],[10,"bitand","","Returns the intersection between the two sets of flags.",77],[10,"sub","","Returns the set difference of the two sets of flags.",77],[10,"not","","Returns the complement of this set of flags.",77],[10,"hash","","",78],[10,"cmp","","",78],[10,"partial_cmp","","",78],[10,"lt","","",78],[10,"le","","",78],[10,"gt","","",78],[10,"ge","","",78],[10,"clone","","",78],[10,"eq","","",78],[10,"ne","","",78],[10,"empty","","Returns an empty set of flags.",78],[10,"all","","Returns the set containing all flags.",78],[10,"bits","","Returns the raw value of the flags currently stored.",78],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78],[10,"is_empty","","Returns `true` if no flags are currently stored.",78],[10,"is_all","","Returns `true` if all flags are currently set.",78],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78],[10,"insert","","Inserts the specified flags in-place.",78],[10,"remove","","Removes the specified flags in-place.",78],[10,"toggle","","Toggles the specified flags in-place.",78],[10,"bitor","","Returns the union of the two sets of flags.",78],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",78],[10,"bitand","","Returns the intersection between the two sets of flags.",78],[10,"sub","","Returns the set difference of the two sets of flags.",78],[10,"not","","Returns the complement of this set of flags.",78],[10,"hash","","",79],[10,"cmp","","",79],[10,"partial_cmp","","",79],[10,"lt","","",79],[10,"le","","",79],[10,"gt","","",79],[10,"ge","","",79],[10,"clone","","",79],[10,"eq","","",79],[10,"ne","","",79],[10,"empty","","Returns an empty set of flags.",79],[10,"all","","Returns the set containing all flags.",79],[10,"bits","","Returns the raw value of the flags currently stored.",79],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79],[10,"is_empty","","Returns `true` if no flags are currently stored.",79],[10,"is_all","","Returns `true` if all flags are currently set.",79],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79],[10,"insert","","Inserts the specified flags in-place.",79],[10,"remove","","Removes the specified flags in-place.",79],[10,"toggle","","Toggles the specified flags in-place.",79],[10,"bitor","","Returns the union of the two sets of flags.",79],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",79],[10,"bitand","","Returns the intersection between the two sets of flags.",79],[10,"sub","","Returns the set difference of the two sets of flags.",79],[10,"not","","Returns the complement of this set of flags.",79],[10,"hash","","",80],[10,"cmp","","",80],[10,"partial_cmp","","",80],[10,"lt","","",80],[10,"le","","",80],[10,"gt","","",80],[10,"ge","","",80],[10,"clone","","",80],[10,"eq","","",80],[10,"ne","","",80],[10,"empty","","Returns an empty set of flags.",80],[10,"all","","Returns the set containing all flags.",80],[10,"bits","","Returns the raw value of the flags currently stored.",80],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80],[10,"is_empty","","Returns `true` if no flags are currently stored.",80],[10,"is_all","","Returns `true` if all flags are currently set.",80],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80],[10,"insert","","Inserts the specified flags in-place.",80],[10,"remove","","Removes the specified flags in-place.",80],[10,"toggle","","Toggles the specified flags in-place.",80],[10,"bitor","","Returns the union of the two sets of flags.",80],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",80],[10,"bitand","","Returns the intersection between the two sets of flags.",80],[10,"sub","","Returns the set difference of the two sets of flags.",80],[10,"not","","Returns the complement of this set of flags.",80]],"paths":[[1,"CredentialHelper"],[1,"IndexEntry"],[1,"PushStatus"],[2,"StatusShow"],[2,"ErrorCode"],[2,"RepositoryState"],[2,"Direction"],[2,"ResetType"],[2,"ObjectType"],[2,"BranchType"],[2,"ConfigLevel"],[2,"Delta"],[2,"DiffFormat"],[1,"RepoBuilder"],[1,"CheckoutBuilder"],[1,"Blob"],[1,"Branch"],[1,"Branches"],[1,"Buf"],[1,"Commit"],[1,"Parents"],[1,"Config"],[1,"ConfigEntry"],[1,"ConfigEntries"],[1,"Cred"],[1,"Diff"],[1,"DiffDelta"],[1,"DiffFile"],[1,"DiffOptions"],[1,"Deltas"],[1,"DiffLine"],[1,"DiffHunk"],[1,"DiffStats"],[1,"Error"],[1,"Index"],[1,"IndexEntries"],[1,"Note"],[1,"Notes"],[1,"Object"],[1,"Oid"],[1,"Pathspec"],[1,"PathspecMatchList"],[1,"PathspecEntries"],[1,"PathspecDiffEntries"],[1,"PathspecFailedEntries"],[1,"Push"],[1,"Reference"],[1,"References"],[1,"ReferenceNames"],[1,"Refspec"],[1,"Remote"],[1,"Refspecs"],[1,"RemoteHead"],[1,"RemoteCallbacks"],[1,"Progress"],[1,"Repository"],[1,"RepositoryInitOptions"],[1,"Revspec"],[1,"Revwalk"],[1,"Signature"],[1,"StatusOptions"],[1,"Statuses"],[1,"StatusIter"],[1,"StatusEntry"],[1,"StringArray"],[1,"StringArrayItems"],[1,"StringArrayBytes"],[1,"Submodule"],[1,"Tag"],[1,"Time"],[1,"IndexTime"],[1,"Tree"],[1,"TreeEntry"],[1,"Sort"],[1,"CredentialType"],[1,"IndexAddOption"],[1,"RevparseMode"],[1,"Status"],[1,"RepositoryInitMode"],[1,"SubmoduleStatus"],[1,"PathspecFlags"]]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Ipv6Address","","A 128 bit IPv6 address"],[11,"pieces","","",0],[1,"Url","","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[11,"query","","The query string of the URL.",1],[11,"fragment","","The fragment identifier of the URL.",1],[1,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[11,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[11,"password","","The password of the URL.",2],[11,"host","","The host of the URL, either a domain name or an IPv4 address",2],[11,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[11,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2],[11,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[1,"UrlParser","","A set of optional parameters for URL parsing."],[2,"Host","","The host name of an URL."],[12,"Domain","","A (DNS) domain name or an IPv4 address.",3],[12,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[2,"ParseError","","Errors that can occur during parsing."],[12,"EmptyHost","","",4],[12,"InvalidScheme","","",4],[12,"InvalidPort","","",4],[12,"InvalidIpv6Address","","",4],[12,"InvalidDomainCharacter","","",4],[12,"InvalidCharacter","","",4],[12,"InvalidBackslash","","",4],[12,"InvalidPercentEncoded","","",4],[12,"InvalidAtSymbolInUser","","",4],[12,"ExpectedTwoSlashes","","",4],[12,"ExpectedInitialSlash","","",4],[12,"NonUrlCodePoint","","",4],[12,"RelativeUrlWithScheme","","",4],[12,"RelativeUrlWithoutBase","","",4],[12,"RelativeUrlWithNonRelativeBase","","",4],[12,"NonAsciiDomainsNotSupportedYet","","",4],[12,"CannotSetJavascriptFragment","","",4],[12,"CannotSetPortWithFileLikeScheme","","",4],[12,"CannotSetUsernameWithNonRelativeScheme","","",4],[12,"CannotSetPasswordWithNonRelativeScheme","","",4],[12,"CannotSetHostPortWithNonRelativeScheme","","",4],[12,"CannotSetHostWithNonRelativeScheme","","",4],[12,"CannotSetPortWithNonRelativeScheme","","",4],[12,"CannotSetPathWithNonRelativeScheme","","",4],[2,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[12,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5],[12,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[2,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[12,"NonRelative","","Indicate that the scheme is *non-relative*.",6],[12,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6],[12,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6],[3,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier."],[3,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3],[10,"serialize","","Serialize the host as a string.",3],[10,"fmt","","",3],[10,"parse","","Parse an IPv6 address, without the [] square brackets.",0],[10,"serialize","","Serialize the IPv6 address to a string.",0],[10,"fmt","","",0],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"description","","",4],[10,"fmt","","",4],[0,"percent_encoding","",""],[1,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[3,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[3,"percent_encode","","Percent-encode the given bytes."],[3,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[3,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[3,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[3,"percent_decode","","Percent-decode the given bytes."],[3,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[3,"from_hex","",""],[5,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[5,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[5,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[5,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[5,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[5,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[5,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[3,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[3,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[3,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[3,"decode","","Convert Punycode to Unicode."],[3,"encode_str","","Convert an Unicode `str` to Punycode."],[3,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[1,"PathFormatter","url::format","Formatter and serializer for URL path data."],[11,"path","","The path as a slice of string-like objects (String or &str).",7],[1,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[11,"username","","URL username as a string slice.",8],[11,"password","","URL password as an optional string slice.",8],[1,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[11,"url","","",9],[10,"fmt","","",7],[10,"fmt","","",8],[10,"fmt","","",9],[4,"ErrorHandler","url","This is called on non-fatal parse errors."],[4,"ParseResult","",""],[6,"ToUrlPath","",""],[9,"to_url_path","","",10],[6,"FromUrlPath","",""],[9,"from_url_path","","",11],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",1],[10,"new","","Return a new UrlParser with default parameters.",12],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12],[10,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12],[10,"eq","","",6],[10,"ne","","",6],[10,"default_port","","",6],[10,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[10,"serialize","","Return the serialization of this URL as a string.",1],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[10,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[10,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[10,"username","","If the URL is in a *relative scheme*, return its username.",1],[10,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[10,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1],[10,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[10,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[10,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[10,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[10,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[10,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[10,"path","","If the URL is in a *relative scheme*, return its path components.",1],[10,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[10,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1],[10,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1],[10,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1],[10,"encode","","",1],[10,"decode","","",1],[10,"fmt","","",1],[10,"fmt","","",5],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[10,"domain","","If the host is a domain, return the domain as a string.",2],[10,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[10,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[10,"serialize_path","","Serialize the path as a string.",2],[10,"serialize_userinfo","","Serialize the userinfo as a string.",2],[10,"fmt","","",2],[10,"to_url_path","std::path::posix","",13],[10,"to_url_path","std::path::windows","",14],[10,"from_url_path","std::path::posix","",13],[10,"from_url_path","std::path::windows","",14]],"paths":[[1,"Ipv6Address"],[1,"Url"],[1,"RelativeSchemeData"],[2,"Host"],[2,"ParseError"],[2,"SchemeData"],[2,"SchemeType"],[1,"PathFormatter"],[1,"UserInfoFormatter"],[1,"UrlNoFragmentFormatter"],[6,"ToUrlPath"],[6,"FromUrlPath"],[1,"UrlParser"],[1,"Path"],[1,"Path"]]};

searchIndex['libgit2-sys'] = {"items":[[0,"","libgit2-sys",""],[1,"git_revspec","",""],[11,"from","","",0],[11,"to","","",0],[11,"flags","","",0],[1,"git_error","",""],[11,"message","","",1],[11,"klass","","",1],[1,"git_oid","",""],[11,"id","","",2],[1,"git_strarray","",""],[11,"strings","","",3],[11,"count","","",3],[1,"git_signature","",""],[11,"name","","",4],[11,"email","","",4],[11,"when","","",4],[1,"git_time","",""],[11,"time","","",5],[11,"offset","","",5],[1,"git_clone_options","",""],[11,"version","","",6],[11,"checkout_opts","","",6],[11,"remote_callbacks","","",6],[11,"bare","","",6],[11,"local","","",6],[11,"checkout_branch","","",6],[11,"signature","","",6],[11,"repository_cb","","",6],[11,"repository_cb_payload","","",6],[11,"remote_cb","","",6],[11,"remote_cb_payload","","",6],[1,"git_checkout_options","",""],[11,"version","","",7],[11,"checkout_strategy","","",7],[11,"disable_filters","","",7],[11,"dir_mode","","",7],[11,"file_mode","","",7],[11,"file_open_flags","","",7],[11,"notify_flags","","",7],[11,"notify_cb","","",7],[11,"notify_payload","","",7],[11,"progress_cb","","",7],[11,"progress_payload","","",7],[11,"paths","","",7],[11,"baseline","","",7],[11,"target_directory","","",7],[11,"ancestor_label","","",7],[11,"our_label","","",7],[11,"their_label","","",7],[1,"git_remote_callbacks","",""],[11,"version","","",8],[11,"sideband_progress","","",8],[11,"completion","","",8],[11,"credentials","","",8],[11,"certificate_check","","",8],[11,"transfer_progress","","",8],[11,"update_tips","","",8],[11,"pack_progress","","",8],[11,"push_transfer_progress","","",8],[11,"push_update_reference","","",8],[11,"payload","","",8],[1,"git_cert","",""],[11,"cert_type","","",9],[1,"git_transfer_progress","",""],[11,"total_objects","","",10],[11,"indexed_objects","","",10],[11,"received_objects","","",10],[11,"local_objects","","",10],[11,"total_deltas","","",10],[11,"indexed_deltas","","",10],[11,"received_bytes","","",10],[1,"git_diff_file","",""],[11,"id","","",11],[11,"path","","",11],[11,"size","","",11],[11,"flags","","",11],[11,"mode","","",11],[1,"git_status_options","",""],[11,"version","","",12],[11,"show","","",12],[11,"flags","","",12],[11,"pathspec","","",12],[1,"git_diff_delta","",""],[11,"status","","",13],[11,"flags","","",13],[11,"similarity","","",13],[11,"nfiles","","",13],[11,"old_file","","",13],[11,"new_file","","",13],[1,"git_status_entry","",""],[11,"status","","",14],[11,"head_to_index","","",14],[11,"index_to_workdir","","",14],[1,"git_buf","",""],[11,"ptr","","",15],[11,"asize","","",15],[11,"size","","",15],[1,"git_index_entry","",""],[11,"ctime","","",16],[11,"mtime","","",16],[11,"dev","","",16],[11,"ino","","",16],[11,"mode","","",16],[11,"uid","","",16],[11,"gid","","",16],[11,"file_size","","",16],[11,"id","","",16],[11,"flags","","",16],[11,"flags_extended","","",16],[11,"path","","",16],[1,"git_index_time","",""],[11,"seconds","","",17],[11,"nanoseconds","","",17],[1,"git_config_entry","",""],[11,"name","","",18],[11,"value","","",18],[11,"level","","",18],[1,"git_cred","",""],[11,"credtype","","",19],[11,"free","","",19],[1,"git_push_options","",""],[11,"version","","",20],[11,"pb_parallelism","","",20],[1,"git_repository_init_options","",""],[11,"version","","",21],[11,"flags","","",21],[11,"mode","","",21],[11,"workdir_path","","",21],[11,"description","","",21],[11,"template_path","","",21],[11,"initial_head","","",21],[11,"origin_url","","",21],[1,"git_remote_head","",""],[11,"local","","",22],[11,"oid","","",22],[11,"loid","","",22],[11,"name","","",22],[11,"symref_target","","",22],[1,"git_diff_hunk","",""],[11,"old_start","","",23],[11,"old_lines","","",23],[11,"new_start","","",23],[11,"new_lines","","",23],[11,"header_len","","",23],[11,"header","","",23],[1,"git_diff_line","",""],[11,"origin","","",24],[11,"old_lineno","","",24],[11,"new_lineno","","",24],[11,"num_lines","","",24],[11,"content_len","","",24],[11,"content_offset","","",24],[11,"content","","",24],[1,"git_diff_options","",""],[11,"version","","",25],[11,"flags","","",25],[11,"ignore_submodules","","",25],[11,"pathspec","","",25],[11,"notify_cb","","",25],[11,"notify_payload","","",25],[11,"context_lines","","",25],[11,"interhunk_lines","","",25],[11,"id_abbrev","","",25],[11,"max_size","","",25],[11,"old_prefix","","",25],[11,"new_prefix","","",25],[2,"git_blob","",""],[2,"git_branch_iterator","",""],[2,"git_commit","",""],[2,"git_config","",""],[2,"git_config_iterator","",""],[2,"git_index","",""],[2,"git_object","",""],[2,"git_reference","",""],[2,"git_reference_iterator","",""],[2,"git_refspec","",""],[2,"git_remote","",""],[2,"git_repository","",""],[2,"git_revwalk","",""],[2,"git_submodule","",""],[2,"git_tag","",""],[2,"git_tree","",""],[2,"git_tree_entry","",""],[2,"git_push","",""],[2,"git_note","",""],[2,"git_note_iterator","",""],[2,"git_status_list","",""],[2,"git_pathspec","",""],[2,"git_pathspec_match_list","",""],[2,"git_diff","",""],[2,"git_diff_stats","",""],[2,"git_error_code","",""],[12,"GIT_OK","","",26],[12,"GIT_ERROR","","",26],[12,"GIT_ENOTFOUND","","",26],[12,"GIT_EEXISTS","","",26],[12,"GIT_EAMBIGUOUS","","",26],[12,"GIT_EBUFS","","",26],[12,"GIT_EUSER","","",26],[12,"GIT_EBAREREPO","","",26],[12,"GIT_EUNBORNBRANCH","","",26],[12,"GIT_EUNMERGED","","",26],[12,"GIT_ENONFASTFORWARD","","",26],[12,"GIT_EINVALIDSPEC","","",26],[12,"GIT_EMERGECONFLICT","","",26],[12,"GIT_ELOCKED","","",26],[12,"GIT_EMODIFIED","","",26],[12,"GIT_PASSTHROUGH","","",26],[12,"GIT_ITEROVER","","",26],[2,"git_repository_state_t","",""],[12,"GIT_REPOSITORY_STATE_NONE","","",27],[12,"GIT_REPOSITORY_STATE_MERGE","","",27],[12,"GIT_REPOSITORY_STATE_REVERT","","",27],[12,"GIT_REPOSITORY_STATE_CHERRYPICK","","",27],[12,"GIT_REPOSITORY_STATE_BISECT","","",27],[12,"GIT_REPOSITORY_STATE_REBASE","","",27],[12,"GIT_REPOSITORY_STATE_REBASE_INTERACTIVE","","",27],[12,"GIT_REPOSITORY_STATE_REBASE_MERGE","","",27],[12,"GIT_REPOSITORY_STATE_APPLY_MAILBOX","","",27],[12,"GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE","","",27],[2,"git_direction","",""],[12,"GIT_DIRECTION_FETCH","","",28],[12,"GIT_DIRECTION_PUSH","","",28],[2,"git_clone_local_t","",""],[12,"GIT_CLONE_LOCAL_AUTO","","",29],[12,"GIT_CLONE_LOCAL","","",29],[12,"GIT_CLONE_NO_LOCAL","","",29],[12,"GIT_CLONE_LOCAL_NO_LINKS","","",29],[2,"git_remote_completion_type","",""],[12,"GIT_REMOTE_COMPLETION_DOWNLOAD","","",30],[12,"GIT_REMOTE_COMPLETION_INDEXING","","",30],[12,"GIT_REMOTE_COMPLETION_ERROR","","",30],[2,"git_cert_t","",""],[12,"GIT_CERT_X509","","",31],[12,"GIT_CERT_HOSTKEY_LIBSSH2","","",31],[2,"git_checkout_notify_t","",""],[12,"GIT_CHECKOUT_NOTIFY_NONE","","",32],[12,"GIT_CHECKOUT_NOTIFY_CONFLICT","","",32],[12,"GIT_CHECKOUT_NOTIFY_DIRTY","","",32],[12,"GIT_CHECKOUT_NOTIFY_UPDATED","","",32],[12,"GIT_CHECKOUT_NOTIFY_UNTRACKED","","",32],[12,"GIT_CHECKOUT_NOTIFY_IGNORED","","",32],[12,"GIT_CHECKOUT_NOTIFY_ALL","","",32],[2,"git_status_t","",""],[12,"GIT_STATUS_CURRENT","","",33],[12,"GIT_STATUS_INDEX_NEW","","",33],[12,"GIT_STATUS_INDEX_MODIFIED","","",33],[12,"GIT_STATUS_INDEX_DELETED","","",33],[12,"GIT_STATUS_INDEX_RENAMED","","",33],[12,"GIT_STATUS_INDEX_TYPECHANGE","","",33],[12,"GIT_STATUS_WT_NEW","","",33],[12,"GIT_STATUS_WT_MODIFIED","","",33],[12,"GIT_STATUS_WT_DELETED","","",33],[12,"GIT_STATUS_WT_TYPECHANGE","","",33],[12,"GIT_STATUS_WT_RENAMED","","",33],[12,"GIT_STATUS_WT_UNREADABLE","","",33],[12,"GIT_STATUS_IGNORED","","",33],[2,"git_status_opt_t","",""],[12,"GIT_STATUS_OPT_INCLUDE_UNTRACKED","","",34],[12,"GIT_STATUS_OPT_INCLUDE_IGNORED","","",34],[12,"GIT_STATUS_OPT_INCLUDE_UNMODIFIED","","",34],[12,"GIT_STATUS_OPT_EXCLUDE_SUBMODULES","","",34],[12,"GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","","",34],[12,"GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","","",34],[12,"GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","","",34],[12,"GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","","",34],[12,"GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","","",34],[12,"GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","","",34],[12,"GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","","",34],[12,"GIT_STATUS_OPT_RENAMES_FROM_REWRITES","","",34],[12,"GIT_STATUS_OPT_NO_REFRESH","","",34],[12,"GIT_STATUS_OPT_UPDATE_INDEX","","",34],[12,"GIT_STATUS_OPT_INCLUDE_UNREADABLE","","",34],[12,"GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED","","",34],[2,"git_status_show_t","",""],[12,"GIT_STATUS_SHOW_INDEX_AND_WORKDIR","","",35],[12,"GIT_STATUS_SHOW_INDEX_ONLY","","",35],[12,"GIT_STATUS_SHOW_WORKDIR_ONLY","","",35],[2,"git_delta_t","",""],[12,"GIT_DELTA_UNMODIFIED","","",36],[12,"GIT_DELTA_ADDED","","",36],[12,"GIT_DELTA_DELETED","","",36],[12,"GIT_DELTA_MODIFIED","","",36],[12,"GIT_DELTA_RENAMED","","",36],[12,"GIT_DELTA_COPIED","","",36],[12,"GIT_DELTA_IGNORED","","",36],[12,"GIT_DELTA_UNTRACKED","","",36],[12,"GIT_DELTA_TYPECHANGE","","",36],[12,"GIT_DELTA_UNREADABLE","","",36],[2,"git_checkout_strategy_t","",""],[12,"GIT_CHECKOUT_NONE","","",37],[12,"GIT_CHECKOUT_SAFE","","",37],[12,"GIT_CHECKOUT_SAFE_CREATE","","",37],[12,"GIT_CHECKOUT_FORCE","","",37],[12,"GIT_CHECKOUT_ALLOW_CONFLICTS","","",37],[12,"GIT_CHECKOUT_REMOVE_UNTRACKED","","",37],[12,"GIT_CHECKOUT_REMOVE_IGNORED","","",37],[12,"GIT_CHECKOUT_UPDATE_ONLY","","",37],[12,"GIT_CHECKOUT_DONT_UPDATE_INDEX","","",37],[12,"GIT_CHECKOUT_NO_REFRESH","","",37],[12,"GIT_CHECKOUT_SKIP_UNMERGED","","",37],[12,"GIT_CHECKOUT_USE_OURS","","",37],[12,"GIT_CHECKOUT_USE_THEIRS","","",37],[12,"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","","",37],[12,"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","","",37],[12,"GIT_CHECKOUT_DONT_OVERWRITE_IGNORED","","",37],[12,"GIT_CHECKOUT_CONFLICT_STYLE_MERGE","","",37],[12,"GIT_CHECKOUT_CONFLICT_STYLE_DIFF3","","",37],[12,"GIT_CHECKOUT_UPDATE_SUBMODULES","","",37],[12,"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","","",37],[2,"git_reset_t","",""],[12,"GIT_RESET_SOFT","","",38],[12,"GIT_RESET_MIXED","","",38],[12,"GIT_RESET_HARD","","",38],[2,"git_otype","",""],[12,"GIT_OBJ_ANY","","",39],[12,"GIT_OBJ_BAD","","",39],[12,"GIT_OBJ__EXT1","","",39],[12,"GIT_OBJ_COMMIT","","",39],[12,"GIT_OBJ_TREE","","",39],[12,"GIT_OBJ_BLOB","","",39],[12,"GIT_OBJ_TAG","","",39],[12,"GIT_OBJ__EXT2","","",39],[12,"GIT_OBJ_OFS_DELTA","","",39],[12,"GIT_OBJ_REF_DELTA","","",39],[2,"git_ref_t","",""],[12,"GIT_REF_INVALID","","",40],[12,"GIT_REF_OID","","",40],[12,"GIT_REF_SYMBOLIC","","",40],[12,"GIT_REF_LISTALL","","",40],[2,"git_filemode_t","",""],[12,"GIT_FILEMODE_UNREADABLE","","",41],[12,"GIT_FILEMODE_TREE","","",41],[12,"GIT_FILEMODE_BLOB","","",41],[12,"GIT_FILEMODE_BLOB_EXECUTABLE","","",41],[12,"GIT_FILEMODE_LINK","","",41],[12,"GIT_FILEMODE_COMMIT","","",41],[2,"git_treewalk_mode","",""],[12,"GIT_TREEWALK_PRE","","",42],[12,"GIT_TREEWALK_POST","","",42],[2,"git_branch_t","",""],[12,"GIT_BRANCH_LOCAL","","",43],[12,"GIT_BRANCH_REMOTE","","",43],[12,"GIT_BRANCH_ALL","","",43],[2,"git_config_level_t","",""],[12,"GIT_CONFIG_LEVEL_SYSTEM","","",44],[12,"GIT_CONFIG_LEVEL_XDG","","",44],[12,"GIT_CONFIG_LEVEL_GLOBAL","","",44],[12,"GIT_CONFIG_LEVEL_LOCAL","","",44],[12,"GIT_CONFIG_LEVEL_APP","","",44],[12,"GIT_CONFIG_HIGHEST_LEVEL","","",44],[2,"git_submodule_update_t","",""],[12,"GIT_SUBMODULE_UPDATE_RESET","","",45],[12,"GIT_SUBMODULE_UPDATE_CHECKOUT","","",45],[12,"GIT_SUBMODULE_UPDATE_REBASE","","",45],[12,"GIT_SUBMODULE_UPDATE_MERGE","","",45],[12,"GIT_SUBMODULE_UPDATE_NONE","","",45],[12,"GIT_SUBMODULE_UPDATE_DEFAULT","","",45],[2,"git_submodule_ignore_t","",""],[12,"GIT_SUBMODULE_IGNORE_RESET","","",46],[12,"GIT_SUBMODULE_IGNORE_NONE","","",46],[12,"GIT_SUBMODULE_IGNORE_UNTRACKED","","",46],[12,"GIT_SUBMODULE_IGNORE_DIRTY","","",46],[12,"GIT_SUBMODULE_IGNORE_ALL","","",46],[12,"GIT_SUBMODULE_IGNORE_DEFAULT","","",46],[2,"git_credtype_t","",""],[12,"GIT_CREDTYPE_USERPASS_PLAINTEXT","","",47],[12,"GIT_CREDTYPE_SSH_KEY","","",47],[12,"GIT_CREDTYPE_SSH_CUSTOM","","",47],[12,"GIT_CREDTYPE_DEFAULT","","",47],[12,"GIT_CREDTYPE_SSH_INTERACTIVE","","",47],[2,"LIBSSH2_SESSION","",""],[2,"LIBSSH2_USERAUTH_KBDINT_PROMPT","",""],[2,"LIBSSH2_USERAUTH_KBDINT_RESPONSE","",""],[2,"git_index_add_option_t","",""],[12,"GIT_INDEX_ADD_DEFAULT","","",48],[12,"GIT_INDEX_ADD_FORCE","","",48],[12,"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","","",48],[12,"GIT_INDEX_ADD_CHECK_PATHSPEC","","",48],[2,"git_repository_init_flag_t","",""],[12,"GIT_REPOSITORY_INIT_BARE","","",49],[12,"GIT_REPOSITORY_INIT_NO_REINIT","","",49],[12,"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","","",49],[12,"GIT_REPOSITORY_INIT_MKDIR","","",49],[12,"GIT_REPOSITORY_INIT_MKPATH","","",49],[12,"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","","",49],[2,"git_repository_init_mode_t","",""],[12,"GIT_REPOSITORY_INIT_SHARED_UMASK","","",50],[12,"GIT_REPOSITORY_INIT_SHARED_GROUP","","",50],[12,"GIT_REPOSITORY_INIT_SHARED_ALL","","",50],[2,"git_sort","",""],[12,"GIT_SORT_NONE","","",51],[12,"GIT_SORT_TOPOLOGICAL","","",51],[12,"GIT_SORT_TIME","","",51],[12,"GIT_SORT_REVERSE","","",51],[2,"git_diff_format_t","",""],[12,"GIT_DIFF_FORMAT_PATCH","","",52],[12,"GIT_DIFF_FORMAT_PATCH_HEADER","","",52],[12,"GIT_DIFF_FORMAT_RAW","","",52],[12,"GIT_DIFF_FORMAT_NAME_ONLY","","",52],[12,"GIT_DIFF_FORMAT_NAME_STATUS","","",52],[2,"git_diff_stats_format_t","",""],[12,"GIT_DIFF_STATS_NONE","","",53],[12,"GIT_DIFF_STATS_FULL","","",53],[12,"GIT_DIFF_STATS_SHORT","","",53],[12,"GIT_DIFF_STATS_NUMBER","","",53],[12,"GIT_DIFF_STATS_INCLUDE_SUMMARY","","",53],[3,"openssl_init","","Initialize openssl for the libgit2 library"],[3,"issue_14344_workaround","",""],[3,"git_libgit2_init","",""],[3,"git_libgit2_shutdown","",""],[3,"git_repository_free","",""],[3,"git_repository_open","",""],[3,"git_repository_init","",""],[3,"git_repository_init_ext","",""],[3,"git_repository_init_init_options","",""],[3,"git_repository_get_namespace","",""],[3,"git_repository_head","",""],[3,"git_repository_is_bare","",""],[3,"git_repository_is_empty","",""],[3,"git_repository_is_shallow","",""],[3,"git_repository_path","",""],[3,"git_repository_state","",""],[3,"git_repository_workdir","",""],[3,"git_repository_index","",""],[3,"git_repository_config","",""],[3,"git_repository_config_snapshot","",""],[3,"git_repository_discover","",""],[3,"git_revparse","",""],[3,"git_revparse_single","",""],[3,"git_object_dup","",""],[3,"git_object_id","",""],[3,"git_object_free","",""],[3,"git_object_lookup","",""],[3,"git_object_type","",""],[3,"git_object_peel","",""],[3,"git_object_short_id","",""],[3,"git_object_type2string","",""],[3,"git_object_string2type","",""],[3,"git_object_typeisloose","",""],[3,"git_oid_fromraw","",""],[3,"git_oid_fromstrn","",""],[3,"git_oid_tostr","",""],[3,"git_oid_cmp","",""],[3,"git_oid_equal","",""],[3,"git_oid_streq","",""],[3,"git_oid_iszero","",""],[3,"giterr_last","",""],[3,"giterr_clear","",""],[3,"giterr_detach","",""],[3,"git_remote_create","",""],[3,"git_remote_lookup","",""],[3,"git_remote_create_anonymous","",""],[3,"git_remote_delete","",""],[3,"git_remote_free","",""],[3,"git_remote_name","",""],[3,"git_remote_pushurl","",""],[3,"git_remote_refspec_count","",""],[3,"git_remote_url","",""],[3,"git_remote_connect","",""],[3,"git_remote_connected","",""],[3,"git_remote_disconnect","",""],[3,"git_remote_save","",""],[3,"git_remote_add_fetch","",""],[3,"git_remote_add_push","",""],[3,"git_remote_clear_refspecs","",""],[3,"git_remote_download","",""],[3,"git_remote_stop","",""],[3,"git_remote_dup","",""],[3,"git_remote_get_fetch_refspecs","",""],[3,"git_remote_get_refspec","",""],[3,"git_remote_is_valid_name","",""],[3,"git_remote_list","",""],[3,"git_remote_rename","",""],[3,"git_remote_fetch","",""],[3,"git_remote_update_tips","",""],[3,"git_remote_update_fetchhead","",""],[3,"git_remote_set_url","",""],[3,"git_remote_set_pushurl","",""],[3,"git_remote_set_update_fetchhead","",""],[3,"git_remote_set_fetch_refspecs","",""],[3,"git_remote_set_push_refspecs","",""],[3,"git_remote_set_callbacks","",""],[3,"git_remote_init_callbacks","",""],[3,"git_remote_stats","",""],[3,"git_remote_ls","",""],[3,"git_refspec_direction","",""],[3,"git_refspec_dst","",""],[3,"git_refspec_dst_matches","",""],[3,"git_refspec_src","",""],[3,"git_refspec_src_matches","",""],[3,"git_refspec_force","",""],[3,"git_refspec_string","",""],[3,"git_strarray_free","",""],[3,"git_signature_default","",""],[3,"git_signature_free","",""],[3,"git_signature_new","",""],[3,"git_signature_now","",""],[3,"git_signature_dup","",""],[3,"git_status_list_new","",""],[3,"git_status_list_entrycount","",""],[3,"git_status_byindex","",""],[3,"git_status_list_free","",""],[3,"git_status_init_options","",""],[3,"git_status_file","",""],[3,"git_status_should_ignore","",""],[3,"git_clone","",""],[3,"git_clone_init_options","",""],[3,"git_reset","",""],[3,"git_reset_default","",""],[3,"git_reference_cmp","",""],[3,"git_reference_delete","",""],[3,"git_reference_free","",""],[3,"git_reference_is_branch","",""],[3,"git_reference_is_note","",""],[3,"git_reference_is_remote","",""],[3,"git_reference_is_tag","",""],[3,"git_reference_is_valid_name","",""],[3,"git_reference_lookup","",""],[3,"git_reference_name","",""],[3,"git_reference_name_to_id","",""],[3,"git_reference_rename","",""],[3,"git_reference_resolve","",""],[3,"git_reference_shorthand","",""],[3,"git_reference_symbolic_target","",""],[3,"git_reference_target","",""],[3,"git_reference_target_peel","",""],[3,"git_reference_type","",""],[3,"git_reference_iterator_new","",""],[3,"git_reference_iterator_glob_new","",""],[3,"git_reference_iterator_free","",""],[3,"git_reference_next","",""],[3,"git_reference_next_name","",""],[3,"git_reference_create","",""],[3,"git_reference_symbolic_create","",""],[3,"git_submodule_add_finalize","",""],[3,"git_submodule_add_setup","",""],[3,"git_submodule_add_to_index","",""],[3,"git_submodule_branch","",""],[3,"git_submodule_foreach","",""],[3,"git_submodule_free","",""],[3,"git_submodule_head_id","",""],[3,"git_submodule_index_id","",""],[3,"git_submodule_init","",""],[3,"git_submodule_location","",""],[3,"git_submodule_lookup","",""],[3,"git_submodule_name","",""],[3,"git_submodule_open","",""],[3,"git_submodule_path","",""],[3,"git_submodule_reload","",""],[3,"git_submodule_reload_all","",""],[3,"git_submodule_save","",""],[3,"git_submodule_set_ignore","",""],[3,"git_submodule_set_update","",""],[3,"git_submodule_set_url","",""],[3,"git_submodule_sync","",""],[3,"git_submodule_update","",""],[3,"git_submodule_url","",""],[3,"git_submodule_wd_id","",""],[3,"git_submodule_status","",""],[3,"git_blob_free","",""],[3,"git_blob_id","",""],[3,"git_blob_is_binary","",""],[3,"git_blob_lookup","",""],[3,"git_blob_lookup_prefix","",""],[3,"git_blob_rawcontent","",""],[3,"git_blob_rawsize","",""],[3,"git_blob_create_frombuffer","",""],[3,"git_blob_create_fromdisk","",""],[3,"git_blob_create_fromworkdir","",""],[3,"git_tree_entry_byid","",""],[3,"git_tree_entry_byindex","",""],[3,"git_tree_entry_byname","",""],[3,"git_tree_entry_bypath","",""],[3,"git_tree_entry_cmp","",""],[3,"git_tree_entry_dup","",""],[3,"git_tree_entry_filemode","",""],[3,"git_tree_entry_filemode_raw","",""],[3,"git_tree_entry_free","",""],[3,"git_tree_entry_id","",""],[3,"git_tree_entry_name","",""],[3,"git_tree_entry_to_object","",""],[3,"git_tree_entry_type","",""],[3,"git_tree_entrycount","",""],[3,"git_tree_free","",""],[3,"git_tree_id","",""],[3,"git_tree_lookup","",""],[3,"git_tree_walk","",""],[3,"git_buf_free","",""],[3,"git_buf_grow","",""],[3,"git_buf_set","",""],[3,"git_commit_author","",""],[3,"git_commit_committer","",""],[3,"git_commit_free","",""],[3,"git_commit_id","",""],[3,"git_commit_lookup","",""],[3,"git_commit_message","",""],[3,"git_commit_message_encoding","",""],[3,"git_commit_message_raw","",""],[3,"git_commit_nth_gen_ancestor","",""],[3,"git_commit_parent","",""],[3,"git_commit_parent_id","",""],[3,"git_commit_parentcount","",""],[3,"git_commit_raw_header","",""],[3,"git_commit_summary","",""],[3,"git_commit_time","",""],[3,"git_commit_time_offset","",""],[3,"git_commit_tree","",""],[3,"git_commit_tree_id","",""],[3,"git_commit_amend","",""],[3,"git_commit_create","",""],[3,"git_branch_create","",""],[3,"git_branch_delete","",""],[3,"git_branch_is_head","",""],[3,"git_branch_iterator_free","",""],[3,"git_branch_iterator_new","",""],[3,"git_branch_lookup","",""],[3,"git_branch_move","",""],[3,"git_branch_name","",""],[3,"git_branch_next","",""],[3,"git_branch_set_upstream","",""],[3,"git_branch_upstream","",""],[3,"git_index_add","",""],[3,"git_index_add_all","",""],[3,"git_index_add_bypath","",""],[3,"git_index_clear","",""],[3,"git_index_entry_stage","",""],[3,"git_index_entrycount","",""],[3,"git_index_find","",""],[3,"git_index_free","",""],[3,"git_index_get_byindex","",""],[3,"git_index_get_bypath","",""],[3,"git_index_new","",""],[3,"git_index_open","",""],[3,"git_index_path","",""],[3,"git_index_read","",""],[3,"git_index_read_tree","",""],[3,"git_index_remove","",""],[3,"git_index_remove_all","",""],[3,"git_index_remove_bypath","",""],[3,"git_index_remove_directory","",""],[3,"git_index_update_all","",""],[3,"git_index_write","",""],[3,"git_index_write_tree","",""],[3,"git_index_write_tree_to","",""],[3,"git_config_add_file_ondisk","",""],[3,"git_config_delete_entry","",""],[3,"git_config_delete_multivar","",""],[3,"git_config_find_global","",""],[3,"git_config_find_system","",""],[3,"git_config_find_xdg","",""],[3,"git_config_free","",""],[3,"git_config_get_bool","",""],[3,"git_config_get_entry","",""],[3,"git_config_get_int32","",""],[3,"git_config_get_int64","",""],[3,"git_config_get_string","",""],[3,"git_config_iterator_free","",""],[3,"git_config_iterator_glob_new","",""],[3,"git_config_iterator_new","",""],[3,"git_config_new","",""],[3,"git_config_next","",""],[3,"git_config_open_default","",""],[3,"git_config_open_global","",""],[3,"git_config_open_level","",""],[3,"git_config_open_ondisk","",""],[3,"git_config_parse_bool","",""],[3,"git_config_parse_int32","",""],[3,"git_config_parse_int64","",""],[3,"git_config_set_bool","",""],[3,"git_config_set_int32","",""],[3,"git_config_set_int64","",""],[3,"git_config_set_string","",""],[3,"git_config_snapshot","",""],[3,"git_cred_default_new","",""],[3,"git_cred_has_username","",""],[3,"git_cred_ssh_custom_new","",""],[3,"git_cred_ssh_interactive_new","",""],[3,"git_cred_ssh_key_from_agent","",""],[3,"git_cred_ssh_key_new","",""],[3,"git_cred_userpass","",""],[3,"git_cred_userpass_plaintext_new","",""],[3,"git_push_add_refspec","",""],[3,"git_push_finish","",""],[3,"git_push_free","",""],[3,"git_push_init_options","",""],[3,"git_push_new","",""],[3,"git_push_set_options","",""],[3,"git_push_update_tips","",""],[3,"git_push_status_foreach","",""],[3,"git_tag_annotation_create","",""],[3,"git_tag_create","",""],[3,"git_tag_create_frombuffer","",""],[3,"git_tag_create_lightweight","",""],[3,"git_tag_delete","",""],[3,"git_tag_foreach","",""],[3,"git_tag_free","",""],[3,"git_tag_id","",""],[3,"git_tag_list","",""],[3,"git_tag_list_match","",""],[3,"git_tag_lookup","",""],[3,"git_tag_lookup_prefix","",""],[3,"git_tag_message","",""],[3,"git_tag_name","",""],[3,"git_tag_peel","",""],[3,"git_tag_tagger","",""],[3,"git_tag_target","",""],[3,"git_tag_target_id","",""],[3,"git_tag_target_type","",""],[3,"git_checkout_head","",""],[3,"git_checkout_index","",""],[3,"git_checkout_tree","",""],[3,"git_checkout_init_options","",""],[3,"git_note_author","",""],[3,"git_note_committer","",""],[3,"git_note_create","",""],[3,"git_note_default_ref","",""],[3,"git_note_free","",""],[3,"git_note_id","",""],[3,"git_note_iterator_free","",""],[3,"git_note_iterator_new","",""],[3,"git_note_message","",""],[3,"git_note_next","",""],[3,"git_note_read","",""],[3,"git_note_remove","",""],[3,"git_revwalk_new","",""],[3,"git_revwalk_free","",""],[3,"git_revwalk_reset","",""],[3,"git_revwalk_sorting","",""],[3,"git_revwalk_push_head","",""],[3,"git_revwalk_push","",""],[3,"git_revwalk_push_ref","",""],[3,"git_revwalk_push_glob","",""],[3,"git_revwalk_push_range","",""],[3,"git_revwalk_simplify_first_parent","",""],[3,"git_revwalk_hide_head","",""],[3,"git_revwalk_hide","",""],[3,"git_revwalk_hide_ref","",""],[3,"git_revwalk_hide_glob","",""],[3,"git_revwalk_next","",""],[3,"git_merge_base","",""],[3,"git_pathspec_free","",""],[3,"git_pathspec_match_diff","",""],[3,"git_pathspec_match_index","",""],[3,"git_pathspec_match_list_diff_entry","",""],[3,"git_pathspec_match_list_entry","",""],[3,"git_pathspec_match_list_entrycount","",""],[3,"git_pathspec_match_list_failed_entry","",""],[3,"git_pathspec_match_list_failed_entrycount","",""],[3,"git_pathspec_match_list_free","",""],[3,"git_pathspec_match_tree","",""],[3,"git_pathspec_match_workdir","",""],[3,"git_pathspec_matches_path","",""],[3,"git_pathspec_new","",""],[3,"git_diff_blob_to_buffer","",""],[3,"git_diff_blobs","",""],[3,"git_diff_buffers","",""],[3,"git_diff_foreach","",""],[3,"git_diff_free","",""],[3,"git_diff_get_delta","",""],[3,"git_diff_get_stats","",""],[3,"git_diff_index_to_workdir","",""],[3,"git_diff_init_options","",""],[3,"git_diff_is_sorted_icase","",""],[3,"git_diff_merge","",""],[3,"git_diff_num_deltas","",""],[3,"git_diff_num_deltas_of_type","",""],[3,"git_diff_print","",""],[3,"git_diff_stats_deletions","",""],[3,"git_diff_stats_files_changed","",""],[3,"git_diff_stats_free","",""],[3,"git_diff_stats_insertions","",""],[3,"git_diff_stats_to_buf","",""],[3,"git_diff_status_char","",""],[3,"git_diff_tree_to_index","",""],[3,"git_diff_tree_to_tree","",""],[3,"git_diff_tree_to_workdir","",""],[3,"git_diff_tree_to_workdir_with_index","",""],[4,"git_off_t","",""],[4,"git_time_t","",""],[4,"git_revparse_mode_t","",""],[4,"git_checkout_notify_cb","",""],[4,"git_checkout_progress_cb","",""],[4,"git_transport_message_cb","",""],[4,"git_cred_acquire_cb","",""],[4,"git_transfer_progress_cb","",""],[4,"git_packbuilder_progress","",""],[4,"git_push_transfer_progress","",""],[4,"git_transport_certificate_check_cb","",""],[4,"git_repository_create_cb","",""],[4,"git_remote_create_cb","",""],[4,"git_treewalk_cb","",""],[4,"git_index_matched_path_cb","",""],[4,"git_cred_ssh_interactive_callback","",""],[4,"git_cred_sign_callback","",""],[4,"git_tag_foreach_cb","",""],[4,"git_submodule_status_t","",""],[4,"git_pathspec_flag_t","",""],[4,"git_diff_file_cb","",""],[4,"git_diff_hunk_cb","",""],[4,"git_diff_line_cb","",""],[4,"git_diff_line_t","",""],[4,"git_diff_notify_cb","",""],[4,"git_diff_options_t","",""],[18,"GIT_OID_RAWSZ","",""],[18,"GIT_OID_HEXSZ","",""],[18,"GIT_CLONE_OPTIONS_VERSION","",""],[18,"GIT_CHECKOUT_OPTIONS_VERSION","",""],[18,"GIT_REMOTE_CALLBACKS_VERSION","",""],[18,"GIT_STATUS_OPTIONS_VERSION","",""],[18,"GIT_REVPARSE_SINGLE","",""],[18,"GIT_REVPARSE_RANGE","",""],[18,"GIT_REVPARSE_MERGE_BASE","",""],[18,"GIT_REPOSITORY_INIT_OPTIONS_VERSION","",""],[18,"GIT_SUBMODULE_STATUS_IN_HEAD","",""],[18,"GIT_SUBMODULE_STATUS_IN_INDEX","",""],[18,"GIT_SUBMODULE_STATUS_IN_CONFIG","",""],[18,"GIT_SUBMODULE_STATUS_IN_WD","",""],[18,"GIT_SUBMODULE_STATUS_INDEX_ADDED","",""],[18,"GIT_SUBMODULE_STATUS_INDEX_DELETED","",""],[18,"GIT_SUBMODULE_STATUS_INDEX_MODIFIED","",""],[18,"GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","",""],[18,"GIT_SUBMODULE_STATUS_WD_ADDED","",""],[18,"GIT_SUBMODULE_STATUS_WD_DELETED","",""],[18,"GIT_SUBMODULE_STATUS_WD_MODIFIED","",""],[18,"GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","",""],[18,"GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","",""],[18,"GIT_SUBMODULE_STATUS_WD_UNTRACKED","",""],[18,"GIT_PATHSPEC_DEFAULT","",""],[18,"GIT_PATHSPEC_IGNORE_CASE","",""],[18,"GIT_PATHSPEC_USE_CASE","",""],[18,"GIT_PATHSPEC_NO_GLOB","",""],[18,"GIT_PATHSPEC_NO_MATCH_ERROR","",""],[18,"GIT_PATHSPEC_FIND_FAILURES","",""],[18,"GIT_PATHSPEC_FAILURES_ONLY","",""],[18,"GIT_DIFF_LINE_CONTEXT","",""],[18,"GIT_DIFF_LINE_ADDITION","",""],[18,"GIT_DIFF_LINE_DELETION","",""],[18,"GIT_DIFF_LINE_CONTEXT_EOFNL","",""],[18,"GIT_DIFF_LINE_ADD_EOFNL","",""],[18,"GIT_DIFF_LINE_DEL_EOFNL","",""],[18,"GIT_DIFF_LINE_FILE_HDR","",""],[18,"GIT_DIFF_LINE_HUNK_HDR","",""],[18,"GIT_DIFF_LINE_LINE_BINARY","",""],[18,"GIT_DIFF_NORMAL","",""],[18,"GIT_DIFF_REVERSE","",""],[18,"GIT_DIFF_INCLUDE_IGNORED","",""],[18,"GIT_DIFF_RECURSE_IGNORED_DIRS","",""],[18,"GIT_DIFF_INCLUDE_UNTRACKED","",""],[18,"GIT_DIFF_RECURSE_UNTRACKED_DIRS","",""],[18,"GIT_DIFF_INCLUDE_UNMODIFIED","",""],[18,"GIT_DIFF_INCLUDE_TYPECHANGE","",""],[18,"GIT_DIFF_INCLUDE_TYPECHANGE_TREES","",""],[18,"GIT_DIFF_IGNORE_FILEMODE","",""],[18,"GIT_DIFF_IGNORE_SUBMODULES","",""],[18,"GIT_DIFF_IGNORE_CASE","",""],[18,"GIT_DIFF_DISABLE_PATHSPEC_MATCH","",""],[18,"GIT_DIFF_SKIP_BINARY_CHECK","",""],[18,"GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS","",""],[18,"GIT_DIFF_UPDATE_INDEX","",""],[18,"GIT_DIFF_INCLUDE_UNREADABLE","",""],[18,"GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED","",""],[18,"GIT_DIFF_FORCE_TEXT","",""],[18,"GIT_DIFF_FORCE_BINARY","",""],[18,"GIT_DIFF_IGNORE_WHITESPACE","",""],[18,"GIT_DIFF_IGNORE_WHITESPACE_CHANGE","",""],[18,"GIT_DIFF_IGNORE_WHITESPACE_EOL","",""],[18,"GIT_DIFF_SHOW_UNTRACKED_CONTENT","",""],[18,"GIT_DIFF_SHOW_UNMODIFIED","",""],[18,"GIT_DIFF_PATIENCE","",""],[18,"GIT_DIFF_MINIMAL","",""],[18,"GIT_DIFF_SHOW_BINARY","",""],[10,"fmt","","",26],[10,"clone","","",26],[10,"eq","","",26],[10,"ne","","",26]],"paths":[[1,"git_revspec"],[1,"git_error"],[1,"git_oid"],[1,"git_strarray"],[1,"git_signature"],[1,"git_time"],[1,"git_clone_options"],[1,"git_checkout_options"],[1,"git_remote_callbacks"],[1,"git_cert"],[1,"git_transfer_progress"],[1,"git_diff_file"],[1,"git_status_options"],[1,"git_diff_delta"],[1,"git_status_entry"],[1,"git_buf"],[1,"git_index_entry"],[1,"git_index_time"],[1,"git_config_entry"],[1,"git_cred"],[1,"git_push_options"],[1,"git_repository_init_options"],[1,"git_remote_head"],[1,"git_diff_hunk"],[1,"git_diff_line"],[1,"git_diff_options"],[2,"git_error_code"],[2,"git_repository_state_t"],[2,"git_direction"],[2,"git_clone_local_t"],[2,"git_remote_completion_type"],[2,"git_cert_t"],[2,"git_checkout_notify_t"],[2,"git_status_t"],[2,"git_status_opt_t"],[2,"git_status_show_t"],[2,"git_delta_t"],[2,"git_checkout_strategy_t"],[2,"git_reset_t"],[2,"git_otype"],[2,"git_ref_t"],[2,"git_filemode_t"],[2,"git_treewalk_mode"],[2,"git_branch_t"],[2,"git_config_level_t"],[2,"git_submodule_update_t"],[2,"git_submodule_ignore_t"],[2,"git_credtype_t"],[2,"git_index_add_option_t"],[2,"git_repository_init_flag_t"],[2,"git_repository_init_mode_t"],[2,"git_sort"],[2,"git_diff_format_t"],[2,"git_diff_stats_format_t"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ring_buf","",11],[10,"decode","","",11],[10,"encode","collections::btree::map","",12],[10,"decode","","",12],[10,"encode","collections::btree::set","",13],[10,"decode","","",13],[10,"encode","collections::enum_set","",14],[10,"decode","","",14],[10,"encode","std::collections::hash::map","",15],[10,"decode","","",15],[10,"encode","std::collections::hash::set","",16],[10,"decode","","",16],[10,"encode","collections::vec_map","",17],[10,"decode","","",17],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[1,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",18],[11,"newline","","Newline to use",18],[11,"pad","","True to pad output with `=` characters",18],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",19],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19],[2,"Newline","","Available newline types"],[12,"LF","","A linefeed (i.e. Unix-style newline)",20],[12,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21],[12,"InvalidBase64Length","","The input had an invalid length",21],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23],[10,"fmt","","",21],[10,"description","","",21],[10,"detail","","",21],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[2,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",24],[12,"InvalidHexLength","","The input had an invalid length",24],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26],[10,"fmt","","",24],[10,"description","","",24],[10,"detail","","",24],[0,"json","rustc-serialize","JSON parsing and serialization"],[1,"Encoder","rustc-serialize::json","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",27],[12,"U64","","",27],[12,"F64","","",27],[12,"String","","",27],[12,"Boolean","","",27],[12,"Array","","",27],[12,"Object","","",27],[12,"Null","","",27],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",28],[12,"InvalidNumber","","",28],[12,"EOFWhileParsingObject","","",28],[12,"EOFWhileParsingArray","","",28],[12,"EOFWhileParsingValue","","",28],[12,"EOFWhileParsingString","","",28],[12,"KeyMustBeAString","","",28],[12,"ExpectedColon","","",28],[12,"TrailingCharacters","","",28],[12,"TrailingComma","","",28],[12,"InvalidEscape","","",28],[12,"InvalidUnicodeCodePoint","","",28],[12,"LoneLeadingSurrogateInHexEscape","","",28],[12,"UnexpectedEndOfHexEscape","","",28],[12,"UnrecognizedHex","","",28],[12,"NotFourDigit","","",28],[12,"NotUtf8","","",28],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",29],[12,"IoError","","",29],[2,"DecoderError","",""],[12,"ParseError","","",30],[12,"ExpectedError","","",30],[12,"MissingFieldError","","",30],[12,"UnknownVariantError","","",30],[12,"ApplicationError","","",30],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",31],[12,"ObjectEnd","","",31],[12,"ArrayStart","","",31],[12,"ArrayEnd","","",31],[12,"BooleanValue","","",31],[12,"I64Value","","",31],[12,"U64Value","","",31],[12,"F64Value","","",31],[12,"StringValue","","",31],[12,"NullValue","","",31],[12,"Error","","",31],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",32],[12,"Key","","",32],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"escape_bytes","",""],[3,"from_reader","","Decodes a json value from an `&mut io::Reader`"],[3,"from_str","","Decodes a json value from a string"],[4,"Array","",""],[4,"Object","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",33],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"fmt","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"clone","","",30],[10,"fmt","","",28],[10,"description","","",30],[10,"detail","","",30],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",34],[10,"buffer_encode","","Encode the specified struct into a json [u8]",34],[10,"emit_nil","","",34],[10,"emit_uint","","",34],[10,"emit_u64","","",34],[10,"emit_u32","","",34],[10,"emit_u16","","",34],[10,"emit_u8","","",34],[10,"emit_int","","",34],[10,"emit_i64","","",34],[10,"emit_i32","","",34],[10,"emit_i16","","",34],[10,"emit_i8","","",34],[10,"emit_bool","","",34],[10,"emit_f64","","",34],[10,"emit_f32","","",34],[10,"emit_char","","",34],[10,"emit_str","","",34],[10,"emit_enum","","",34],[10,"emit_enum_variant","","",34],[10,"emit_enum_variant_arg","","",34],[10,"emit_enum_struct_variant","","",34],[10,"emit_enum_struct_variant_field","","",34],[10,"emit_struct","","",34],[10,"emit_struct_field","","",34],[10,"emit_tuple","","",34],[10,"emit_tuple_arg","","",34],[10,"emit_tuple_struct","","",34],[10,"emit_tuple_struct_arg","","",34],[10,"emit_option","","",34],[10,"emit_option_none","","",34],[10,"emit_option_some","","",34],[10,"emit_seq","","",34],[10,"emit_seq_elt","","",34],[10,"emit_map","","",34],[10,"emit_map_elt_key","","",34],[10,"emit_map_elt_val","","",34],[10,"new","","Creates a new encoder whose output will be written to the specified writer",35],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35],[10,"emit_nil","","",35],[10,"emit_uint","","",35],[10,"emit_u64","","",35],[10,"emit_u32","","",35],[10,"emit_u16","","",35],[10,"emit_u8","","",35],[10,"emit_int","","",35],[10,"emit_i64","","",35],[10,"emit_i32","","",35],[10,"emit_i16","","",35],[10,"emit_i8","","",35],[10,"emit_bool","","",35],[10,"emit_f64","","",35],[10,"emit_f32","","",35],[10,"emit_char","","",35],[10,"emit_str","","",35],[10,"emit_enum","","",35],[10,"emit_enum_variant","","",35],[10,"emit_enum_variant_arg","","",35],[10,"emit_enum_struct_variant","","",35],[10,"emit_enum_struct_variant_field","","",35],[10,"emit_struct","","",35],[10,"emit_struct_field","","",35],[10,"emit_tuple","","",35],[10,"emit_tuple_arg","","",35],[10,"emit_tuple_struct","","",35],[10,"emit_tuple_struct_arg","","",35],[10,"emit_option","","",35],[10,"emit_option_none","","",35],[10,"emit_option_some","","",35],[10,"emit_seq","","",35],[10,"emit_seq_elt","","",35],[10,"emit_map","","",35],[10,"emit_map_elt_key","","",35],[10,"emit_map_elt_val","","",35],[10,"encode","","",27],[10,"to_writer","","Encodes a json value into an io::writer. Uses a single line.",27],[10,"to_pretty_writer","","Encodes a json value into an io::writer.\nPretty-prints in a more readable format.",27],[10,"to_pretty_str","","Encodes a json value into a string",27],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27],[10,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27],[10,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27],[10,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27],[10,"index","","",27],[10,"index","","",27],[10,"fmt","","",31],[10,"clone","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"fmt","","",32],[10,"clone","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"new","","",36],[10,"len","","Returns The number of elements in the Stack.",36],[10,"is_empty","","Returns true if the stack is empty.",36],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36],[10,"is_equal_to","","Compares this stack with an array of StackElements.",36],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36],[10,"top","","Returns the top-most element (if any).",36],[10,"next","","",37],[10,"new","","Creates the JSON parser.",37],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37],[10,"new","","Create a JSON Builder.",38],[10,"build","","",38],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",39],[10,"read_nil","","",39],[10,"read_uint","","",39],[10,"read_u8","","",39],[10,"read_u16","","",39],[10,"read_u32","","",39],[10,"read_u64","","",39],[10,"read_int","","",39],[10,"read_i8","","",39],[10,"read_i16","","",39],[10,"read_i32","","",39],[10,"read_i64","","",39],[10,"read_f32","","",39],[10,"read_f64","","",39],[10,"read_bool","","",39],[10,"read_char","","",39],[10,"read_str","","",39],[10,"read_enum","","",39],[10,"read_enum_variant","","",39],[10,"read_enum_variant_arg","","",39],[10,"read_enum_struct_variant","","",39],[10,"read_enum_struct_variant_field","","",39],[10,"read_struct","","",39],[10,"read_struct_field","","",39],[10,"read_tuple","","",39],[10,"read_tuple_arg","","",39],[10,"read_tuple_struct","","",39],[10,"read_tuple_struct_arg","","",39],[10,"read_option","","",39],[10,"read_seq","","",39],[10,"read_seq_elt","","",39],[10,"read_map","","",39],[10,"read_map_elt_key","","",39],[10,"read_map_elt_val","","",39],[10,"error","","",39],[10,"to_json","","",27],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",3],[10,"to_json","collections::btree::map","",12],[10,"to_json","std::collections::hash::map","",15],[10,"to_json","core::option","",4],[10,"fmt","rustc-serialize::json","Encodes a json value into a string",27],[10,"from_str","","",27],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[6,"Decoder","rustc-serialize",""],[9,"read_nil","","",40],[9,"read_uint","","",40],[9,"read_u64","","",40],[9,"read_u32","","",40],[9,"read_u16","","",40],[9,"read_u8","","",40],[9,"read_int","","",40],[9,"read_i64","","",40],[9,"read_i32","","",40],[9,"read_i16","","",40],[9,"read_i8","","",40],[9,"read_bool","","",40],[9,"read_f64","","",40],[9,"read_f32","","",40],[9,"read_char","","",40],[9,"read_str","","",40],[9,"read_enum","","",40],[9,"read_enum_variant","","",40],[9,"read_enum_variant_arg","","",40],[9,"read_enum_struct_variant","","",40],[9,"read_enum_struct_variant_field","","",40],[9,"read_struct","","",40],[9,"read_struct_field","","",40],[9,"read_tuple","","",40],[9,"read_tuple_arg","","",40],[9,"read_tuple_struct","","",40],[9,"read_tuple_struct_arg","","",40],[9,"read_option","","",40],[9,"read_seq","","",40],[9,"read_seq_elt","","",40],[9,"read_map","","",40],[9,"read_map_elt_key","","",40],[9,"read_map_elt_val","","",40],[9,"error","","",40],[6,"Encoder","",""],[9,"emit_nil","","",41],[9,"emit_uint","","",41],[9,"emit_u64","","",41],[9,"emit_u32","","",41],[9,"emit_u16","","",41],[9,"emit_u8","","",41],[9,"emit_int","","",41],[9,"emit_i64","","",41],[9,"emit_i32","","",41],[9,"emit_i16","","",41],[9,"emit_i8","","",41],[9,"emit_bool","","",41],[9,"emit_f64","","",41],[9,"emit_f32","","",41],[9,"emit_char","","",41],[9,"emit_str","","",41],[9,"emit_enum","","",41],[9,"emit_enum_variant","","",41],[9,"emit_enum_variant_arg","","",41],[9,"emit_enum_struct_variant","","",41],[9,"emit_enum_struct_variant_field","","",41],[9,"emit_struct","","",41],[9,"emit_struct_field","","",41],[9,"emit_tuple","","",41],[9,"emit_tuple_arg","","",41],[9,"emit_tuple_struct","","",41],[9,"emit_tuple_struct_arg","","",41],[9,"emit_option","","",41],[9,"emit_option_none","","",41],[9,"emit_option_some","","",41],[9,"emit_seq","","",41],[9,"emit_seq_elt","","",41],[9,"emit_map","","",41],[9,"emit_map_elt_key","","",41],[9,"emit_map_elt_val","","",41],[6,"Decodable","",""],[9,"decode","","",42],[6,"Encodable","",""],[9,"encode","","",43],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",44],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",45]],"paths":[[1,"String"],[1,"Box"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"Arc"],[1,"DList"],[1,"RingBuf"],[1,"BTreeMap"],[1,"BTreeSet"],[1,"EnumSet"],[1,"HashMap"],[1,"HashSet"],[1,"VecMap"],[1,"Config"],[2,"CharacterSet"],[2,"Newline"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};

searchIndex['libssh2-sys'] = {"items":[[0,"","libssh2-sys",""],[1,"libssh2_agent_publickey","",""],[11,"magic","","",0],[11,"node","","",0],[11,"blob","","",0],[11,"blob_len","","",0],[11,"comment","","",0],[1,"libssh2_knownhost","",""],[11,"magic","","",1],[11,"node","","",1],[11,"name","","",1],[11,"key","","",1],[11,"typemask","","",1],[1,"LIBSSH2_SFTP_ATTRIBUTES","",""],[11,"flags","","",2],[11,"filesize","","",2],[11,"uid","","",2],[11,"gid","","",2],[11,"permissions","","",2],[11,"atime","","",2],[11,"mtime","","",2],[1,"LIBSSH2_SFTP_STATVFS","",""],[11,"f_bsize","","",3],[11,"f_frsize","","",3],[11,"f_blocks","","",3],[11,"f_bfree","","",3],[11,"f_bavail","","",3],[11,"f_files","","",3],[11,"f_ffree","","",3],[11,"f_favail","","",3],[11,"f_fsid","","",3],[11,"f_flag","","",3],[11,"f_namemax","","",3],[2,"LIBSSH2_SESSION","",""],[2,"LIBSSH2_AGENT","",""],[2,"LIBSSH2_CHANNEL","",""],[2,"LIBSSH2_LISTENER","",""],[2,"LIBSSH2_KNOWNHOSTS","",""],[2,"LIBSSH2_SFTP","",""],[2,"LIBSSH2_SFTP_HANDLE","",""],[3,"issue_14344_workaround","",""],[3,"libssh2_init","",""],[3,"libssh2_exit","",""],[3,"libssh2_free","",""],[3,"libssh2_hostkey_hash","",""],[3,"libssh2_session_init_ex","",""],[3,"libssh2_session_free","",""],[3,"libssh2_session_banner_get","",""],[3,"libssh2_session_banner_set","",""],[3,"libssh2_session_disconnect_ex","",""],[3,"libssh2_session_flag","",""],[3,"libssh2_session_get_blocking","",""],[3,"libssh2_session_get_timeout","",""],[3,"libssh2_session_hostkey","",""],[3,"libssh2_session_method_pref","",""],[3,"libssh2_session_methods","",""],[3,"libssh2_session_set_blocking","",""],[3,"libssh2_session_set_timeout","",""],[3,"libssh2_session_supported_algs","",""],[3,"libssh2_session_last_error","",""],[3,"libssh2_session_handshake","",""],[3,"libssh2_keepalive_config","",""],[3,"libssh2_keepalive_send","",""],[3,"libssh2_agent_init","",""],[3,"libssh2_agent_free","",""],[3,"libssh2_agent_connect","",""],[3,"libssh2_agent_disconnect","",""],[3,"libssh2_agent_list_identities","",""],[3,"libssh2_agent_get_identity","",""],[3,"libssh2_agent_userauth","",""],[3,"libssh2_channel_free","",""],[3,"libssh2_channel_close","",""],[3,"libssh2_channel_wait_closed","",""],[3,"libssh2_channel_wait_eof","",""],[3,"libssh2_channel_eof","",""],[3,"libssh2_channel_process_startup","",""],[3,"libssh2_channel_flush_ex","",""],[3,"libssh2_channel_write_ex","",""],[3,"libssh2_channel_get_exit_signal","",""],[3,"libssh2_channel_get_exit_status","",""],[3,"libssh2_channel_open_ex","",""],[3,"libssh2_channel_read_ex","",""],[3,"libssh2_channel_setenv_ex","",""],[3,"libssh2_channel_send_eof","",""],[3,"libssh2_channel_request_pty_ex","",""],[3,"libssh2_channel_request_pty_size_ex","",""],[3,"libssh2_channel_window_read_ex","",""],[3,"libssh2_channel_window_write_ex","",""],[3,"libssh2_channel_receive_window_adjust2","",""],[3,"libssh2_channel_direct_tcpip_ex","",""],[3,"libssh2_channel_forward_accept","",""],[3,"libssh2_channel_forward_cancel","",""],[3,"libssh2_channel_forward_listen_ex","",""],[3,"libssh2_userauth_authenticated","",""],[3,"libssh2_userauth_list","",""],[3,"libssh2_userauth_hostbased_fromfile_ex","",""],[3,"libssh2_userauth_publickey_fromfile_ex","",""],[3,"libssh2_userauth_password_ex","",""],[3,"libssh2_knownhost_free","",""],[3,"libssh2_knownhost_addc","",""],[3,"libssh2_knownhost_check","",""],[3,"libssh2_knownhost_checkp","",""],[3,"libssh2_knownhost_del","",""],[3,"libssh2_knownhost_get","",""],[3,"libssh2_knownhost_readfile","",""],[3,"libssh2_knownhost_readline","",""],[3,"libssh2_knownhost_writefile","",""],[3,"libssh2_knownhost_writeline","",""],[3,"libssh2_knownhost_init","",""],[3,"libssh2_scp_recv","",""],[3,"libssh2_scp_send64","",""],[3,"libssh2_sftp_init","",""],[3,"libssh2_sftp_shutdown","",""],[3,"libssh2_sftp_last_error","",""],[3,"libssh2_sftp_open_ex","",""],[3,"libssh2_sftp_close_handle","",""],[3,"libssh2_sftp_mkdir_ex","",""],[3,"libssh2_sftp_fsync","",""],[3,"libssh2_sftp_fstat_ex","",""],[3,"libssh2_sftp_fstatvfs","",""],[3,"libssh2_sftp_stat_ex","",""],[3,"libssh2_sftp_read","",""],[3,"libssh2_sftp_symlink_ex","",""],[3,"libssh2_sftp_rename_ex","",""],[3,"libssh2_sftp_rmdir_ex","",""],[3,"libssh2_sftp_write","",""],[3,"libssh2_sftp_tell64","",""],[3,"libssh2_sftp_seek64","",""],[3,"libssh2_sftp_readdir_ex","",""],[4,"LIBSSH2_ALLOC_FUNC","",""],[4,"LIBSSH2_FREE_FUNC","",""],[4,"LIBSSH2_REALLOC_FUNC","",""],[4,"LIBSSH2_PASSWD_CHANGEREQ_FUNC","",""],[4,"libssh2_socket_t","",""],[18,"SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT","",""],[18,"SSH_DISCONNECT_PROTOCOL_ERROR","",""],[18,"SSH_DISCONNECT_KEY_EXCHANGE_FAILED","",""],[18,"SSH_DISCONNECT_RESERVED","",""],[18,"SSH_DISCONNECT_MAC_ERROR","",""],[18,"SSH_DISCONNECT_COMPRESSION_ERROR","",""],[18,"SSH_DISCONNECT_SERVICE_NOT_AVAILABLE","",""],[18,"SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED","",""],[18,"SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE","",""],[18,"SSH_DISCONNECT_CONNECTION_LOST","",""],[18,"SSH_DISCONNECT_BY_APPLICATION","",""],[18,"SSH_DISCONNECT_TOO_MANY_CONNECTIONS","",""],[18,"SSH_DISCONNECT_AUTH_CANCELLED_BY_USER","",""],[18,"SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE","",""],[18,"SSH_DISCONNECT_ILLEGAL_USER_NAME","",""],[18,"LIBSSH2_FLAG_SIGPIPE","",""],[18,"LIBSSH2_FLAG_COMPRESS","",""],[18,"LIBSSH2_HOSTKEY_TYPE_UNKNOWN","",""],[18,"LIBSSH2_HOSTKEY_TYPE_RSA","",""],[18,"LIBSSH2_HOSTKEY_TYPE_DSS","",""],[18,"LIBSSH2_METHOD_KEX","",""],[18,"LIBSSH2_METHOD_HOSTKEY","",""],[18,"LIBSSH2_METHOD_CRYPT_CS","",""],[18,"LIBSSH2_METHOD_CRYPT_SC","",""],[18,"LIBSSH2_METHOD_MAC_CS","",""],[18,"LIBSSH2_METHOD_MAC_SC","",""],[18,"LIBSSH2_METHOD_COMP_CS","",""],[18,"LIBSSH2_METHOD_COMP_SC","",""],[18,"LIBSSH2_METHOD_LANG_CS","",""],[18,"LIBSSH2_METHOD_LANG_SC","",""],[18,"LIBSSH2_CHANNEL_PACKET_DEFAULT","",""],[18,"LIBSSH2_CHANNEL_WINDOW_DEFAULT","",""],[18,"LIBSSH2_ERROR_BANNER_RECV","",""],[18,"LIBSSH2_ERROR_BANNER_SEND","",""],[18,"LIBSSH2_ERROR_INVALID_MAC","",""],[18,"LIBSSH2_ERROR_KEX_FAILURE","",""],[18,"LIBSSH2_ERROR_ALLOC","",""],[18,"LIBSSH2_ERROR_SOCKET_SEND","",""],[18,"LIBSSH2_ERROR_KEY_EXCHANGE_FAILURE","",""],[18,"LIBSSH2_ERROR_TIMEOUT","",""],[18,"LIBSSH2_ERROR_HOSTKEY_INIT","",""],[18,"LIBSSH2_ERROR_HOSTKEY_SIGN","",""],[18,"LIBSSH2_ERROR_DECRYPT","",""],[18,"LIBSSH2_ERROR_SOCKET_DISCONNECT","",""],[18,"LIBSSH2_ERROR_PROTO","",""],[18,"LIBSSH2_ERROR_PASSWORD_EXPIRED","",""],[18,"LIBSSH2_ERROR_FILE","",""],[18,"LIBSSH2_ERROR_METHOD_NONE","",""],[18,"LIBSSH2_ERROR_AUTHENTICATION_FAILED","",""],[18,"LIBSSH2_ERROR_PUBLICKEY_UNRECOGNIZED","",""],[18,"LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED","",""],[18,"LIBSSH2_ERROR_CHANNEL_OUTOFORDER","",""],[18,"LIBSSH2_ERROR_CHANNEL_FAILURE","",""],[18,"LIBSSH2_ERROR_CHANNEL_REQUEST_DENIED","",""],[18,"LIBSSH2_ERROR_CHANNEL_UNKNOWN","",""],[18,"LIBSSH2_ERROR_CHANNEL_WINDOW_EXCEEDED","",""],[18,"LIBSSH2_ERROR_CHANNEL_PACKET_EXCEEDED","",""],[18,"LIBSSH2_ERROR_CHANNEL_CLOSED","",""],[18,"LIBSSH2_ERROR_CHANNEL_EOF_SENT","",""],[18,"LIBSSH2_ERROR_SCP_PROTOCOL","",""],[18,"LIBSSH2_ERROR_ZLIB","",""],[18,"LIBSSH2_ERROR_SOCKET_TIMEOUT","",""],[18,"LIBSSH2_ERROR_SFTP_PROTOCOL","",""],[18,"LIBSSH2_ERROR_REQUEST_DENIED","",""],[18,"LIBSSH2_ERROR_METHOD_NOT_SUPPORTED","",""],[18,"LIBSSH2_ERROR_INVAL","",""],[18,"LIBSSH2_ERROR_INVALID_POLL_TYPE","",""],[18,"LIBSSH2_ERROR_PUBLICKEY_PROTOCOL","",""],[18,"LIBSSH2_ERROR_EAGAIN","",""],[18,"LIBSSH2_ERROR_BUFFER_TOO_SMALL","",""],[18,"LIBSSH2_ERROR_BAD_USE","",""],[18,"LIBSSH2_ERROR_COMPRESS","",""],[18,"LIBSSH2_ERROR_OUT_OF_BOUNDARY","",""],[18,"LIBSSH2_ERROR_AGENT_PROTOCOL","",""],[18,"LIBSSH2_ERROR_SOCKET_RECV","",""],[18,"LIBSSH2_ERROR_ENCRYPT","",""],[18,"LIBSSH2_ERROR_BAD_SOCKET","",""],[18,"LIBSSH2_ERROR_KNOWN_HOSTS","",""],[18,"LIBSSH2_HOSTKEY_HASH_MD5","",""],[18,"LIBSSH2_HOSTKEY_HASH_SHA1","",""],[18,"LIBSSH2_KNOWNHOST_FILE_OPENSSH","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_MATCH","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_MISMATCH","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_NOTFOUND","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_FAILURE","",""],[18,"LIBSSH2_KNOWNHOST_TYPE_PLAIN","",""],[18,"LIBSSH2_KNOWNHOST_TYPE_SHA1","",""],[18,"LIBSSH2_KNOWNHOST_TYPE_CUSTOM","",""],[18,"LIBSSH2_KNOWNHOST_KEYENC_RAW","",""],[18,"LIBSSH2_KNOWNHOST_KEYENC_BASE64","",""],[18,"LIBSSH2_KNOWNHOST_KEY_RSA1","",""],[18,"LIBSSH2_KNOWNHOST_KEY_SSHRSA","",""],[18,"LIBSSH2_KNOWNHOST_KEY_SSHDSS","",""],[18,"LIBSSH2_KNOWNHOST_KEY_UNKNOWN","",""],[18,"LIBSSH2_FXF_READ","",""],[18,"LIBSSH2_FXF_WRITE","",""],[18,"LIBSSH2_FXF_APPEND","",""],[18,"LIBSSH2_FXF_CREAT","",""],[18,"LIBSSH2_FXF_TRUNC","",""],[18,"LIBSSH2_FXF_EXCL","",""],[18,"LIBSSH2_SFTP_OPENFILE","",""],[18,"LIBSSH2_SFTP_OPENDIR","",""],[18,"LIBSSH2_SFTP_ATTR_SIZE","",""],[18,"LIBSSH2_SFTP_ATTR_UIDGID","",""],[18,"LIBSSH2_SFTP_ATTR_PERMISSIONS","",""],[18,"LIBSSH2_SFTP_ATTR_ACMODTIME","",""],[18,"LIBSSH2_SFTP_ATTR_EXTENDED","",""],[18,"LIBSSH2_SFTP_STAT","",""],[18,"LIBSSH2_SFTP_LSTAT","",""],[18,"LIBSSH2_SFTP_SETSTAT","",""],[18,"LIBSSH2_SFTP_SYMLINK","",""],[18,"LIBSSH2_SFTP_READLINK","",""],[18,"LIBSSH2_SFTP_REALPATH","",""],[18,"LIBSSH2_SFTP_RENAME_OVERWRITE","",""],[18,"LIBSSH2_SFTP_RENAME_ATOMIC","",""],[18,"LIBSSH2_SFTP_RENAME_NATIVE","",""]],"paths":[[1,"libssh2_agent_publickey"],[1,"libssh2_knownhost"],[1,"LIBSSH2_SFTP_ATTRIBUTES"],[1,"LIBSSH2_SFTP_STATVFS"]]};

searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[1,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[11,"sec","","",0],[11,"nsec","","",0],[1,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[11,"tm_sec","","Seconds after the minute - [0, 60]",1],[11,"tm_min","","Minutes after the hour - [0, 59]",1],[11,"tm_hour","","Hours after midnight - [0, 23]",1],[11,"tm_mday","","Day of the month - [1, 31]",1],[11,"tm_mon","","Months since January - [0, 11]",1],[11,"tm_year","","Years since 1900",1],[11,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[11,"tm_yday","","Days since January 1 - [0, 365]",1],[11,"tm_isdst","","Daylight Saving Time flag.",1],[11,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[11,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[1,"TmFmt","","A wrapper around a `Tm` and format string that implements Show."],[2,"ParseError","",""],[12,"InvalidSecond","","",2],[12,"InvalidMinute","","",2],[12,"InvalidHour","","",2],[12,"InvalidDay","","",2],[12,"InvalidMonth","","",2],[12,"InvalidYear","","",2],[12,"InvalidDayOfWeek","","",2],[12,"InvalidDayOfMonth","","",2],[12,"InvalidDayOfYear","","",2],[12,"InvalidZoneOffset","","",2],[12,"InvalidTime","","",2],[12,"MissingFormatConverter","","",2],[12,"InvalidFormatSpecifier","","",2],[12,"UnexpectedCharacter","","",2],[3,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[3,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[3,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[3,"tzset","",""],[3,"empty_tm","",""],[3,"at_utc","","Returns the specified time in UTC"],[3,"now_utc","","Returns the current time in UTC"],[3,"at","","Returns the specified time in the local timezone"],[3,"now","","Returns the current time in the local timezone"],[3,"strptime","","Parses the time from the string according to the format string."],[3,"strftime","","Formats the time according to the format string."],[10,"fmt","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"sub","","",0],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"add","","The resulting Tm is in UTC.",1],[10,"sub","","The resulting Tm is in UTC.",1],[10,"partial_cmp","","",1],[10,"cmp","","",1],[10,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[10,"to_local","","Convert time to the local timezone",1],[10,"to_utc","","Convert time to the UTC",1],[10,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1],[10,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1],[10,"strftime","","Formats the time according to the format string.",1],[10,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1],[10,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1],[10,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",3]],"paths":[[1,"Timespec"],[1,"Tm"],[2,"ParseError"],[1,"TmFmt"]]};

searchIndex['openssl-sys'] = {"items":[[0,"","openssl-sys",""],[1,"EVP_MD_CTX","",""],[1,"HMAC_CTX","",""],[1,"X509V3_CTX","",""],[1,"BIGNUM","",""],[11,"d","","",0],[11,"top","","",0],[11,"dmax","","",0],[11,"neg","","",0],[11,"flags","","",0],[3,"init","",""],[3,"BIO_eof","",""],[3,"ASN1_INTEGER_set","",""],[3,"ASN1_STRING_type_new","",""],[3,"ASN1_TIME_free","",""],[3,"BIO_ctrl","",""],[3,"BIO_free_all","",""],[3,"BIO_new","",""],[3,"BIO_read","",""],[3,"BIO_write","",""],[3,"BIO_s_mem","",""],[3,"BN_new","",""],[3,"BN_dup","",""],[3,"BN_clear_free","",""],[3,"BN_CTX_new","",""],[3,"BN_CTX_free","",""],[3,"BN_num_bits","",""],[3,"BN_set_negative","",""],[3,"BN_set_word","",""],[3,"BN_add","",""],[3,"BN_div","",""],[3,"BN_exp","",""],[3,"BN_gcd","",""],[3,"BN_mod_add","",""],[3,"BN_mod_exp","",""],[3,"BN_mod_inverse","",""],[3,"BN_mod_mul","",""],[3,"BN_mod_sqr","",""],[3,"BN_mod_sub","",""],[3,"BN_mul","",""],[3,"BN_nnmod","",""],[3,"BN_sqr","",""],[3,"BN_sub","",""],[3,"BN_clear_bit","",""],[3,"BN_is_bit_set","",""],[3,"BN_lshift","",""],[3,"BN_lshift1","",""],[3,"BN_mask_bits","",""],[3,"BN_rshift","",""],[3,"BN_set_bit","",""],[3,"BN_rshift1","",""],[3,"BN_cmp","",""],[3,"BN_ucmp","",""],[3,"BN_generate_prime_ex","",""],[3,"BN_is_prime_ex","",""],[3,"BN_is_prime_fasttest_ex","",""],[3,"BN_rand","",""],[3,"BN_pseudo_rand","",""],[3,"BN_rand_range","",""],[3,"BN_pseudo_rand_range","",""],[3,"BN_bin2bn","",""],[3,"BN_bn2bin","",""],[3,"BN_bn2dec","",""],[3,"CRYPTO_num_locks","",""],[3,"CRYPTO_set_locking_callback","",""],[3,"CRYPTO_free","",""],[3,"CRYPTO_memcmp","",""],[3,"ERR_get_error","",""],[3,"ERR_lib_error_string","",""],[3,"ERR_func_error_string","",""],[3,"ERR_reason_error_string","",""],[3,"ERR_load_crypto_strings","",""],[3,"EVP_md5","",""],[3,"EVP_ripemd160","",""],[3,"EVP_sha1","",""],[3,"EVP_sha224","",""],[3,"EVP_sha256","",""],[3,"EVP_sha384","",""],[3,"EVP_sha512","",""],[3,"EVP_aes_128_cbc","",""],[3,"EVP_aes_128_ecb","",""],[3,"EVP_aes_256_cbc","",""],[3,"EVP_aes_256_ecb","",""],[3,"EVP_rc4","",""],[3,"EVP_CIPHER_CTX_new","",""],[3,"EVP_CIPHER_CTX_set_padding","",""],[3,"EVP_CIPHER_CTX_free","",""],[3,"EVP_CipherInit","",""],[3,"EVP_CipherUpdate","",""],[3,"EVP_CipherFinal","",""],[3,"EVP_DigestInit","",""],[3,"EVP_DigestInit_ex","",""],[3,"EVP_DigestUpdate","",""],[3,"EVP_DigestFinal","",""],[3,"EVP_DigestFinal_ex","",""],[3,"EVP_MD_CTX_create","",""],[3,"EVP_MD_CTX_destroy","",""],[3,"EVP_PKEY_new","",""],[3,"EVP_PKEY_free","",""],[3,"EVP_PKEY_assign","",""],[3,"EVP_PKEY_get1_RSA","",""],[3,"EVP_PKEY_set1_RSA","",""],[3,"HMAC_CTX_init","",""],[3,"HMAC_Init_ex","",""],[3,"HMAC_Final","",""],[3,"HMAC_Update","",""],[3,"HMAC_CTX_cleanup","",""],[3,"PEM_read_bio_X509","",""],[3,"PEM_write_bio_PrivateKey","",""],[3,"PEM_write_bio_X509","",""],[3,"PKCS5_PBKDF2_HMAC_SHA1","",""],[3,"RAND_bytes","",""],[3,"RSA_generate_key","",""],[3,"RSA_private_decrypt","",""],[3,"RSA_public_encrypt","",""],[3,"RSA_sign","",""],[3,"RSA_size","",""],[3,"RSA_verify","",""],[3,"SSL_library_init","",""],[3,"SSL_load_error_strings","",""],[3,"SSLv3_method","",""],[3,"TLSv1_method","",""],[3,"SSLv23_method","",""],[3,"SSL_new","",""],[3,"SSL_free","",""],[3,"SSL_set_bio","",""],[3,"SSL_get_rbio","",""],[3,"SSL_get_wbio","",""],[3,"SSL_accept","",""],[3,"SSL_connect","",""],[3,"SSL_ctrl","",""],[3,"SSL_get_error","",""],[3,"SSL_read","",""],[3,"SSL_write","",""],[3,"SSL_get_ex_data_X509_STORE_CTX_idx","",""],[3,"SSL_get_SSL_CTX","",""],[3,"SSL_get_current_compression","",""],[3,"SSL_get_peer_certificate","",""],[3,"SSL_COMP_get_name","",""],[3,"SSL_CTX_new","",""],[3,"SSL_CTX_free","",""],[3,"SSL_CTX_set_verify","",""],[3,"SSL_CTX_set_verify_depth","",""],[3,"SSL_CTX_load_verify_locations","",""],[3,"SSL_CTX_get_ex_new_index","",""],[3,"SSL_CTX_set_ex_data","",""],[3,"SSL_CTX_get_ex_data","",""],[3,"SSL_CTX_use_certificate_file","",""],[3,"SSL_CTX_use_PrivateKey_file","",""],[3,"SSL_CTX_set_cipher_list","",""],[3,"X509_add_ext","",""],[3,"X509_digest","",""],[3,"X509_free","",""],[3,"X509_get_serialNumber","",""],[3,"X509_get_subject_name","",""],[3,"X509_gmtime_adj","",""],[3,"X509_new","",""],[3,"X509_set_issuer_name","",""],[3,"X509_set_notAfter","",""],[3,"X509_set_notBefore","",""],[3,"X509_set_version","",""],[3,"X509_set_pubkey","",""],[3,"X509_sign","",""],[3,"X509_EXTENSION_free","",""],[3,"X509_NAME_add_entry_by_txt","",""],[3,"X509_NAME_get_index_by_NID","",""],[3,"X509_NAME_get_entry","",""],[3,"X509_NAME_ENTRY_get_data","",""],[3,"ASN1_STRING_to_UTF8","",""],[3,"X509_STORE_CTX_get_current_cert","",""],[3,"X509_STORE_CTX_get_error","",""],[3,"X509_STORE_CTX_get_ex_data","",""],[3,"X509V3_EXT_conf_nid","",""],[3,"X509V3_set_ctx","",""],[3,"i2d_RSA_PUBKEY","",""],[3,"d2i_RSA_PUBKEY","",""],[3,"i2d_RSAPrivateKey","",""],[3,"d2i_RSAPrivateKey","",""],[0,"probe","",""],[1,"ProbeResult","openssl-sys::probe",""],[11,"cert_file","","",1],[11,"cert_dir","","",1],[3,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound."],[3,"init_ssl_cert_env_vars","",""],[3,"probe","",""],[4,"ASN1_INTEGER","openssl-sys",""],[4,"ASN1_STRING","",""],[4,"ASN1_TIME","",""],[4,"BIO","",""],[4,"BIO_METHOD","",""],[4,"BN_CTX","",""],[4,"COMP_METHOD","",""],[4,"CRYPTO_EX_DATA","",""],[4,"ENGINE","",""],[4,"EVP_CIPHER","",""],[4,"EVP_CIPHER_CTX","",""],[4,"EVP_MD","",""],[4,"EVP_PKEY","",""],[4,"EVP_PKEY_CTX","",""],[4,"RSA","",""],[4,"SSL","",""],[4,"SSL_CTX","",""],[4,"SSL_METHOD","",""],[4,"X509","",""],[4,"X509_CRL","",""],[4,"X509_EXTENSION","",""],[4,"X509_NAME","",""],[4,"X509_NAME_ENTRY","",""],[4,"X509_REQ","",""],[4,"X509_STORE_CTX","",""],[4,"CRYPTO_EX_new","",""],[4,"CRYPTO_EX_dup","",""],[4,"CRYPTO_EX_free","",""],[4,"PasswordCallback","",""],[18,"BIO_CTRL_EOF","",""],[18,"CRYPTO_LOCK","",""],[18,"MBSTRING_ASC","",""],[18,"MBSTRING_BMP","",""],[18,"MBSTRING_FLAG","",""],[18,"MBSTRING_UNIV","",""],[18,"MBSTRING_UTF8","",""],[18,"NID_ext_key_usage","",""],[18,"NID_key_usage","",""],[18,"SSL_CTRL_SET_TLSEXT_HOSTNAME","",""],[18,"SSL_ERROR_NONE","",""],[18,"SSL_ERROR_SSL","",""],[18,"SSL_ERROR_SYSCALL","",""],[18,"SSL_ERROR_WANT_ACCEPT","",""],[18,"SSL_ERROR_WANT_CONNECT","",""],[18,"SSL_ERROR_WANT_READ","",""],[18,"SSL_ERROR_WANT_WRITE","",""],[18,"SSL_ERROR_WANT_X509_LOOKUP","",""],[18,"SSL_ERROR_ZERO_RETURN","",""],[18,"SSL_VERIFY_NONE","",""],[18,"SSL_VERIFY_PEER","",""],[18,"TLSEXT_NAMETYPE_host_name","",""],[18,"V_ASN1_GENERALIZEDTIME","",""],[18,"V_ASN1_UTCTIME","",""],[18,"X509_FILETYPE_ASN1","",""],[18,"X509_FILETYPE_DEFAULT","",""],[18,"X509_FILETYPE_PEM","",""],[18,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","",""],[18,"X509_V_ERR_AKID_SKID_MISMATCH","",""],[18,"X509_V_ERR_APPLICATION_VERIFICATION","",""],[18,"X509_V_ERR_CERT_CHAIN_TOO_LONG","",""],[18,"X509_V_ERR_CERT_HAS_EXPIRED","",""],[18,"X509_V_ERR_CERT_NOT_YET_VALID","",""],[18,"X509_V_ERR_CERT_REJECTED","",""],[18,"X509_V_ERR_CERT_REVOKED","",""],[18,"X509_V_ERR_CERT_SIGNATURE_FAILURE","",""],[18,"X509_V_ERR_CERT_UNTRUSTED","",""],[18,"X509_V_ERR_CRL_HAS_EXPIRED","",""],[18,"X509_V_ERR_CRL_NOT_YET_VALID","",""],[18,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","",""],[18,"X509_V_ERR_CRL_SIGNATURE_FAILURE","",""],[18,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","",""],[18,"X509_V_ERR_DIFFERENT_CRL_SCOPE","",""],[18,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","",""],[18,"X509_V_ERR_EXCLUDED_VIOLATION","",""],[18,"X509_V_ERR_INVALID_CA","",""],[18,"X509_V_ERR_INVALID_EXTENSION","",""],[18,"X509_V_ERR_INVALID_NON_CA","",""],[18,"X509_V_ERR_INVALID_POLICY_EXTENSION","",""],[18,"X509_V_ERR_INVALID_PURPOSE","",""],[18,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","",""],[18,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","",""],[18,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","",""],[18,"X509_V_ERR_NO_EXPLICIT_POLICY","",""],[18,"X509_V_ERR_OUT_OF_MEM","",""],[18,"X509_V_ERR_PATH_LENGTH_EXCEEDED","",""],[18,"X509_V_ERR_PERMITTED_VIOLATION","",""],[18,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","",""],[18,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","",""],[18,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","",""],[18,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","",""],[18,"X509_V_ERR_SUBTREE_MINMAX","",""],[18,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","",""],[18,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","",""],[18,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","",""],[18,"X509_V_ERR_UNABLE_TO_GET_CRL","",""],[18,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","",""],[18,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","",""],[18,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","",""],[18,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","",""],[18,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","",""],[18,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","",""],[18,"X509_V_ERR_UNNESTED_RESOURCE","",""],[18,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","",""],[18,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","",""],[18,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","",""],[18,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","",""],[18,"X509_V_OK","",""]],"paths":[[1,"BIGNUM"],[1,"ProbeResult"]]};

searchIndex['libz-sys'] = {"items":[],"paths":[]};

searchIndex['gcc'] = {"items":[[0,"","gcc",""],[1,"Config","","Extra configuration to pass to gcc."],[11,"include_directories","","Directories where gcc will look for header files.",0],[11,"definitions","","Additional definitions (`-DKEY` or `-DKEY=VALUE`).",0],[11,"objects","","Additional object files to link into the final archive",0],[11,"flags","","Additional flags and parameter to pass to the compiler",0],[3,"compile_library","","Compile a library from the given set of input C files."],[10,"default","","",0]],"paths":[[1,"Config"]]};

searchIndex['pkg-config'] = {"items":[[0,"","pkg-config",""],[1,"Options","",""],[11,"statik","","",0],[11,"atleast_version","","",0],[3,"target_supported","",""],[3,"find_library","",""],[3,"find_library_opts","",""],[3,"default_options","",""]],"paths":[[1,"Options"]]};

initSearch(searchIndex);
